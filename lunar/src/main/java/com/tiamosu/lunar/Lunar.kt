package com.tiamosu.lunar

import com.tiamosu.lunar.utils.LunarUtil
import com.tiamosu.lunar.utils.LunarUtil.getDaysOfMonth
import com.tiamosu.lunar.utils.LunarUtil.getLeapMonth
import com.tiamosu.lunar.utils.SolarUtil
import java.util.*
import kotlin.collections.ArrayList
import kotlin.collections.LinkedHashMap
import kotlin.math.abs
import kotlin.math.cos
import kotlin.math.floor
import kotlin.math.sin


/**
 * 描述：农历日期
 *
 * @author tiamosu
 * @date 2020/6/1.
 */
@Suppress("PrivatePropertyName", "MemberVisibilityCanBePrivate", "unused")
class Lunar {
    /** 1弧度对应的角秒  */
    private val SECOND_PER_RAD = 180 * 3600 / Math.PI

    /** 节气表，国标以冬至为首个节气  */
    private val JIE_QI = arrayOf(
        "冬至",
        "小寒",
        "大寒",
        "立春",
        "雨水",
        "惊蛰",
        "春分",
        "清明",
        "谷雨",
        "立夏",
        "小满",
        "芒种",
        "夏至",
        "小暑",
        "大暑",
        "立秋",
        "处暑",
        "白露",
        "秋分",
        "寒露",
        "霜降",
        "立冬",
        "小雪",
        "大雪"
    )

    private val NUT_B = doubleArrayOf(
        2.1824,
        -33.75705,
        36e-6,
        -1720.0,
        920.0,
        3.5069,
        1256.66393,
        11e-6,
        -132.0,
        57.0,
        1.3375,
        16799.4182,
        -51e-6,
        -23.0,
        10.0,
        4.3649,
        -67.5141,
        72e-6,
        21.0,
        -9.0,
        0.04,
        -628.302,
        0.0,
        -14.0,
        0.0,
        2.36,
        8328.691,
        0.0,
        7.0,
        0.0,
        3.46,
        1884.966,
        0.0,
        -5.0,
        2.0,
        5.44,
        16833.175,
        0.0,
        -4.0,
        2.0,
        3.69,
        25128.110,
        0.0,
        -3.0,
        0.0,
        3.55,
        628.362,
        0.0,
        2.0,
        0.0
    )

    private val DT_AT = doubleArrayOf(
        -4000.0,
        108371.7,
        -13036.80,
        392.000,
        0.0000,
        -500.0,
        17201.0,
        -627.82,
        16.170,
        -0.3413,
        -150.0,
        12200.6,
        -346.41,
        5.403,
        -0.1593,
        150.0,
        9113.8,
        -328.13,
        -1.647,
        0.0377,
        500.0,
        5707.5,
        -391.41,
        0.915,
        0.3145,
        900.0,
        2203.4,
        -283.45,
        13.034,
        -0.1778,
        1300.0,
        490.1,
        -57.35,
        2.085,
        -0.0072,
        1600.0,
        120.0,
        -9.81,
        -1.532,
        0.1403,
        1700.0,
        10.2,
        -0.91,
        0.510,
        -0.0370,
        1800.0,
        13.4,
        -0.72,
        0.202,
        -0.0193,
        1830.0,
        7.8,
        -1.81,
        0.416,
        -0.0247,
        1860.0,
        8.3,
        -0.13,
        -0.406,
        0.0292,
        1880.0,
        -5.4,
        0.32,
        -0.183,
        0.0173,
        1900.0,
        -2.3,
        2.06,
        0.169,
        -0.0135,
        1920.0,
        21.2,
        1.69,
        -0.304,
        0.0167,
        1940.0,
        24.2,
        1.22,
        -0.064,
        0.0031,
        1960.0,
        33.2,
        0.51,
        0.231,
        -0.0109,
        1980.0,
        51.0,
        1.29,
        -0.026,
        0.0032,
        2000.0,
        63.87,
        0.1,
        0.0,
        0.0,
        2005.0,
        64.7,
        0.4,
        0.0,
        0.0,
        2015.0,
        69.0
    )

    private val XL0 = doubleArrayOf(
        10000000000.0,
        20.0,
        578.0,
        920.0,
        1100.0,
        1124.0,
        1136.0,
        1148.0,
        1217.0,
        1226.0,
        1229.0,
        1229.0,
        1229.0,
        1229.0,
        1937.0,
        2363.0,
        2618.0,
        2633.0,
        2660.0,
        2666.0,
        17534704567.0,
        0.00000000000,
        0.00000000000,
        334165646.0,
        4.669256804,
        6283.075849991,
        3489428.0,
        4.6261024,
        12566.1517000,
        349706.0,
        2.744118,
        5753.384885,
        341757.0,
        2.828866,
        3.523118,
        313590.0,
        3.627670,
        77713.771468,
        267622.0,
        4.418084,
        7860.419392,
        234269.0,
        6.135162,
        3930.209696,
        132429.0,
        0.742464,
        11506.769770,
        127317.0,
        2.037097,
        529.690965,
        119917.0,
        1.109629,
        1577.343542,
        99025.0,
        5.23268,
        5884.92685,
        90186.0,
        2.04505,
        26.29832,
        85722.0,
        3.50849,
        398.14900,
        77979.0,
        1.17883,
        5223.69392,
        75314.0,
        2.53339,
        5507.55324,
        50526.0,
        4.58293,
        18849.22755,
        49238.0,
        4.20507,
        775.52261,
        35666.0,
        2.91954,
        0.06731,
        31709.0,
        5.84902,
        11790.62909,
        28413.0,
        1.89869,
        796.29801,
        27104.0,
        0.31489,
        10977.07880,
        24281.0,
        0.34481,
        5486.77784,
        20616.0,
        4.80647,
        2544.31442,
        20539.0,
        1.86948,
        5573.14280,
        20226.0,
        2.45768,
        6069.77675,
        15552.0,
        0.83306,
        213.29910,
        13221.0,
        3.41118,
        2942.46342,
        12618.0,
        1.08303,
        20.77540,
        11513.0,
        0.64545,
        0.98032,
        10285.0,
        0.63600,
        4694.00295,
        10190.0,
        0.97569,
        15720.83878,
        10172.0,
        4.26680,
        7.11355,
        9921.0,
        6.2099,
        2146.1654,
        9761.0,
        0.6810,
        155.4204,
        8580.0,
        5.9832,
        161000.6857,
        8513.0,
        1.2987,
        6275.9623,
        8471.0,
        3.6708,
        71430.6956,
        7964.0,
        1.8079,
        17260.1547,
        7876.0,
        3.0370,
        12036.4607,
        7465.0,
        1.7551,
        5088.6288,
        7387.0,
        3.5032,
        3154.6871,
        7355.0,
        4.6793,
        801.8209,
        6963.0,
        0.8330,
        9437.7629,
        6245.0,
        3.9776,
        8827.3903,
        6115.0,
        1.8184,
        7084.8968,
        5696.0,
        2.7843,
        6286.5990,
        5612.0,
        4.3869,
        14143.4952,
        5558.0,
        3.4701,
        6279.5527,
        5199.0,
        0.1891,
        12139.5535,
        5161.0,
        1.3328,
        1748.0164,
        5115.0,
        0.2831,
        5856.4777,
        4900.0,
        0.4874,
        1194.4470,
        4104.0,
        5.3682,
        8429.2413,
        4094.0,
        2.3985,
        19651.0485,
        3920.0,
        6.1683,
        10447.3878,
        3677.0,
        6.0413,
        10213.2855,
        3660.0,
        2.5696,
        1059.3819,
        3595.0,
        1.7088,
        2352.8662,
        3557.0,
        1.7760,
        6812.7668,
        3329.0,
        0.5931,
        17789.8456,
        3041.0,
        0.4429,
        83996.8473,
        3005.0,
        2.7398,
        1349.8674,
        2535.0,
        3.1647,
        4690.4798,
        2474.0,
        0.2148,
        3.5904,
        2366.0,
        0.4847,
        8031.0923,
        2357.0,
        2.0653,
        3340.6124,
        2282.0,
        5.2220,
        4705.7323,
        2189.0,
        5.5559,
        553.5694,
        2142.0,
        1.4256,
        16730.4637,
        2109.0,
        4.1483,
        951.7184,
        2030.0,
        0.3713,
        283.8593,
        1992.0,
        5.2221,
        12168.0027,
        1986.0,
        5.7747,
        6309.3742,
        1912.0,
        3.8222,
        23581.2582,
        1889.0,
        5.3863,
        149854.4001,
        1790.0,
        2.2149,
        13367.9726,
        1748.0,
        4.5605,
        135.0651,
        1622.0,
        5.9884,
        11769.8537,
        1508.0,
        4.1957,
        6256.7775,
        1442.0,
        4.1932,
        242.7286,
        1435.0,
        3.7236,
        38.0277,
        1397.0,
        4.4014,
        6681.2249,
        1362.0,
        1.8893,
        7632.9433,
        1250.0,
        1.1305,
        5.5229,
        1205.0,
        2.6223,
        955.5997,
        1200.0,
        1.0035,
        632.7837,
        1129.0,
        0.1774,
        4164.3120,
        1083.0,
        0.3273,
        103.0928,
        1052.0,
        0.9387,
        11926.2544,
        1050.0,
        5.3591,
        1592.5960,
        1033.0,
        6.1998,
        6438.4962,
        1001.0,
        6.0291,
        5746.2713,
        980.0,
        0.999,
        11371.705,
        980.0,
        5.244,
        27511.468,
        938.0,
        2.624,
        5760.498,
        923.0,
        0.483,
        522.577,
        922.0,
        4.571,
        4292.331,
        905.0,
        5.337,
        6386.169,
        862.0,
        4.165,
        7058.598,
        841.0,
        3.299,
        7234.794,
        836.0,
        4.539,
        25132.303,
        813.0,
        6.112,
        4732.031,
        812.0,
        6.271,
        426.598,
        801.0,
        5.821,
        28.449,
        787.0,
        0.996,
        5643.179,
        776.0,
        2.957,
        23013.540,
        769.0,
        3.121,
        7238.676,
        758.0,
        3.974,
        11499.656,
        735.0,
        4.386,
        316.392,
        731.0,
        0.607,
        11513.883,
        719.0,
        3.998,
        74.782,
        706.0,
        0.323,
        263.084,
        676.0,
        5.911,
        90955.552,
        663.0,
        3.665,
        17298.182,
        653.0,
        5.791,
        18073.705,
        630.0,
        4.717,
        6836.645,
        615.0,
        1.458,
        233141.314,
        612.0,
        1.075,
        19804.827,
        596.0,
        3.321,
        6283.009,
        596.0,
        2.876,
        6283.143,
        555.0,
        2.452,
        12352.853,
        541.0,
        5.392,
        419.485,
        531.0,
        0.382,
        31441.678,
        519.0,
        4.065,
        6208.294,
        513.0,
        2.361,
        10973.556,
        494.0,
        5.737,
        9917.697,
        450.0,
        3.272,
        11015.106,
        449.0,
        3.653,
        206.186,
        447.0,
        2.064,
        7079.374,
        435.0,
        4.423,
        5216.580,
        421.0,
        1.906,
        245.832,
        413.0,
        0.921,
        3738.761,
        402.0,
        0.840,
        20.355,
        387.0,
        1.826,
        11856.219,
        379.0,
        2.344,
        3.881,
        374.0,
        2.954,
        3128.389,
        370.0,
        5.031,
        536.805,
        365.0,
        1.018,
        16200.773,
        365.0,
        1.083,
        88860.057,
        352.0,
        5.978,
        3894.182,
        352.0,
        2.056,
        244287.600,
        351.0,
        3.713,
        6290.189,
        340.0,
        1.106,
        14712.317,
        339.0,
        0.978,
        8635.942,
        339.0,
        3.202,
        5120.601,
        333.0,
        0.837,
        6496.375,
        325.0,
        3.479,
        6133.513,
        316.0,
        5.089,
        21228.392,
        316.0,
        1.328,
        10873.986,
        309.0,
        3.646,
        10.637,
        303.0,
        1.802,
        35371.887,
        296.0,
        3.397,
        9225.539,
        288.0,
        6.026,
        154717.610,
        281.0,
        2.585,
        14314.168,
        262.0,
        3.856,
        266.607,
        262.0,
        2.579,
        22483.849,
        257.0,
        1.561,
        23543.231,
        255.0,
        3.949,
        1990.745,
        251.0,
        3.744,
        10575.407,
        240.0,
        1.161,
        10984.192,
        238.0,
        0.106,
        7.046,
        236.0,
        4.272,
        6040.347,
        234.0,
        3.577,
        10969.965,
        211.0,
        3.714,
        65147.620,
        210.0,
        0.754,
        13521.751,
        207.0,
        4.228,
        5650.292,
        202.0,
        0.814,
        170.673,
        201.0,
        4.629,
        6037.244,
        200.0,
        0.381,
        6172.870,
        199.0,
        3.933,
        6206.810,
        199.0,
        5.197,
        6262.300,
        197.0,
        1.046,
        18209.330,
        195.0,
        1.070,
        5230.807,
        195.0,
        4.869,
        36.028,
        194.0,
        4.313,
        6244.943,
        192.0,
        1.229,
        709.933,
        192.0,
        5.595,
        6282.096,
        192.0,
        0.602,
        6284.056,
        189.0,
        3.744,
        23.878,
        188.0,
        1.904,
        15.252,
        188.0,
        0.867,
        22003.915,
        182.0,
        3.681,
        15110.466,
        181.0,
        0.491,
        1.484,
        179.0,
        3.222,
        39302.097,
        179.0,
        1.259,
        12559.038,
        62833196674749.0,
        0.000000000000,
        0.000000000000,
        20605886.0,
        2.67823456,
        6283.07584999,
        430343.0,
        2.635127,
        12566.151700,
        42526.0,
        1.59047,
        3.52312,
        11926.0,
        5.79557,
        26.29832,
        10898.0,
        2.96618,
        1577.34354,
        9348.0,
        2.5921,
        18849.2275,
        7212.0,
        1.1385,
        529.6910,
        6777.0,
        1.8747,
        398.1490,
        6733.0,
        4.4092,
        5507.5532,
        5903.0,
        2.8880,
        5223.6939,
        5598.0,
        2.1747,
        155.4204,
        4541.0,
        0.3980,
        796.2980,
        3637.0,
        0.4662,
        775.5226,
        2896.0,
        2.6471,
        7.1135,
        2084.0,
        5.3414,
        0.9803,
        1910.0,
        1.8463,
        5486.7778,
        1851.0,
        4.9686,
        213.2991,
        1729.0,
        2.9912,
        6275.9623,
        1623.0,
        0.0322,
        2544.3144,
        1583.0,
        1.4305,
        2146.1654,
        1462.0,
        1.2053,
        10977.0788,
        1246.0,
        2.8343,
        1748.0164,
        1188.0,
        3.2580,
        5088.6288,
        1181.0,
        5.2738,
        1194.4470,
        1151.0,
        2.0750,
        4694.0030,
        1064.0,
        0.7661,
        553.5694,
        997.0,
        1.303,
        6286.599,
        972.0,
        4.239,
        1349.867,
        945.0,
        2.700,
        242.729,
        858.0,
        5.645,
        951.718,
        758.0,
        5.301,
        2352.866,
        639.0,
        2.650,
        9437.763,
        610.0,
        4.666,
        4690.480,
        583.0,
        1.766,
        1059.382,
        531.0,
        0.909,
        3154.687,
        522.0,
        5.661,
        71430.696,
        520.0,
        1.854,
        801.821,
        504.0,
        1.425,
        6438.496,
        433.0,
        0.241,
        6812.767,
        426.0,
        0.774,
        10447.388,
        413.0,
        5.240,
        7084.897,
        374.0,
        2.001,
        8031.092,
        356.0,
        2.429,
        14143.495,
        350.0,
        4.800,
        6279.553,
        337.0,
        0.888,
        12036.461,
        337.0,
        3.862,
        1592.596,
        325.0,
        3.400,
        7632.943,
        322.0,
        0.616,
        8429.241,
        318.0,
        3.188,
        4705.732,
        297.0,
        6.070,
        4292.331,
        295.0,
        1.431,
        5746.271,
        290.0,
        2.325,
        20.355,
        275.0,
        0.935,
        5760.498,
        270.0,
        4.804,
        7234.794,
        253.0,
        6.223,
        6836.645,
        228.0,
        5.003,
        17789.846,
        225.0,
        5.672,
        11499.656,
        215.0,
        5.202,
        11513.883,
        208.0,
        3.955,
        10213.286,
        208.0,
        2.268,
        522.577,
        206.0,
        2.224,
        5856.478,
        206.0,
        2.550,
        25132.303,
        203.0,
        0.910,
        6256.778,
        189.0,
        0.532,
        3340.612,
        188.0,
        4.735,
        83996.847,
        179.0,
        1.474,
        4164.312,
        178.0,
        3.025,
        5.523,
        177.0,
        3.026,
        5753.385,
        159.0,
        4.637,
        3.286,
        157.0,
        6.124,
        5216.580,
        155.0,
        3.077,
        6681.225,
        154.0,
        4.200,
        13367.973,
        143.0,
        1.191,
        3894.182,
        138.0,
        3.093,
        135.065,
        136.0,
        4.245,
        426.598,
        134.0,
        5.765,
        6040.347,
        128.0,
        3.085,
        5643.179,
        127.0,
        2.092,
        6290.189,
        125.0,
        3.077,
        11926.254,
        125.0,
        3.445,
        536.805,
        114.0,
        3.244,
        12168.003,
        112.0,
        2.318,
        16730.464,
        111.0,
        3.901,
        11506.770,
        111.0,
        5.320,
        23.878,
        105.0,
        3.750,
        7860.419,
        103.0,
        2.447,
        1990.745,
        96.0,
        0.82,
        3.88,
        96.0,
        4.08,
        6127.66,
        91.0,
        5.42,
        206.19,
        91.0,
        0.42,
        7079.37,
        88.0,
        5.17,
        11790.63,
        81.0,
        0.34,
        9917.70,
        80.0,
        3.89,
        10973.56,
        78.0,
        2.40,
        1589.07,
        78.0,
        2.58,
        11371.70,
        77.0,
        3.98,
        955.60,
        77.0,
        3.36,
        36.03,
        76.0,
        1.30,
        103.09,
        75.0,
        5.18,
        10969.97,
        75.0,
        4.96,
        6496.37,
        73.0,
        5.21,
        38.03,
        72.0,
        2.65,
        6309.37,
        70.0,
        5.61,
        3738.76,
        69.0,
        2.60,
        3496.03,
        69.0,
        0.39,
        15.25,
        69.0,
        2.78,
        20.78,
        65.0,
        1.13,
        7058.60,
        64.0,
        4.28,
        28.45,
        61.0,
        5.63,
        10984.19,
        60.0,
        0.73,
        419.48,
        60.0,
        5.28,
        10575.41,
        58.0,
        5.55,
        17298.18,
        58.0,
        3.19,
        4732.03,
        5291887.0,
        0.0000000,
        0.0000000,
        871984.0,
        1.072097,
        6283.075850,
        30913.0,
        0.86729,
        12566.15170,
        2734.0,
        0.0530,
        3.5231,
        1633.0,
        5.1883,
        26.2983,
        1575.0,
        3.6846,
        155.4204,
        954.0,
        0.757,
        18849.228,
        894.0,
        2.057,
        77713.771,
        695.0,
        0.827,
        775.523,
        506.0,
        4.663,
        1577.344,
        406.0,
        1.031,
        7.114,
        381.0,
        3.441,
        5573.143,
        346.0,
        5.141,
        796.298,
        317.0,
        6.053,
        5507.553,
        302.0,
        1.192,
        242.729,
        289.0,
        6.117,
        529.691,
        271.0,
        0.306,
        398.149,
        254.0,
        2.280,
        553.569,
        237.0,
        4.381,
        5223.694,
        208.0,
        3.754,
        0.980,
        168.0,
        0.902,
        951.718,
        153.0,
        5.759,
        1349.867,
        145.0,
        4.364,
        1748.016,
        134.0,
        3.721,
        1194.447,
        125.0,
        2.948,
        6438.496,
        122.0,
        2.973,
        2146.165,
        110.0,
        1.271,
        161000.686,
        104.0,
        0.604,
        3154.687,
        100.0,
        5.986,
        6286.599,
        92.0,
        4.80,
        5088.63,
        89.0,
        5.23,
        7084.90,
        83.0,
        3.31,
        213.30,
        76.0,
        3.42,
        5486.78,
        71.0,
        6.19,
        4690.48,
        68.0,
        3.43,
        4694.00,
        65.0,
        1.60,
        2544.31,
        64.0,
        1.98,
        801.82,
        61.0,
        2.48,
        10977.08,
        50.0,
        1.44,
        6836.65,
        49.0,
        2.34,
        1592.60,
        46.0,
        1.31,
        4292.33,
        46.0,
        3.81,
        149854.40,
        43.0,
        0.04,
        7234.79,
        40.0,
        4.94,
        7632.94,
        39.0,
        1.57,
        71430.70,
        38.0,
        3.17,
        6309.37,
        35.0,
        0.99,
        6040.35,
        35.0,
        0.67,
        1059.38,
        31.0,
        3.18,
        2352.87,
        31.0,
        3.55,
        8031.09,
        30.0,
        1.92,
        10447.39,
        30.0,
        2.52,
        6127.66,
        28.0,
        4.42,
        9437.76,
        28.0,
        2.71,
        3894.18,
        27.0,
        0.67,
        25132.30,
        26.0,
        5.27,
        6812.77,
        25.0,
        0.55,
        6279.55,
        23.0,
        1.38,
        4705.73,
        22.0,
        0.64,
        6256.78,
        20.0,
        6.07,
        640.88,
        28923.0,
        5.84384,
        6283.07585,
        3496.0,
        0.0000,
        0.0000,
        1682.0,
        5.4877,
        12566.1517,
        296.0,
        5.196,
        155.420,
        129.0,
        4.722,
        3.523,
        71.0,
        5.30,
        18849.23,
        64.0,
        5.97,
        242.73,
        40.0,
        3.79,
        553.57,
        11408.0,
        3.14159,
        0.00000,
        772.0,
        4.134,
        6283.076,
        77.0,
        3.84,
        12566.15,
        42.0,
        0.42,
        155.42,
        88.0,
        3.14,
        0.00,
        17.0,
        2.77,
        6283.08,
        5.0,
        2.01,
        155.42,
        3.0,
        2.21,
        12566.15,
        27962.0,
        3.19870,
        84334.66158,
        10164.0,
        5.42249,
        5507.55324,
        8045.0,
        3.8801,
        5223.6939,
        4381.0,
        3.7044,
        2352.8662,
        3193.0,
        4.0003,
        1577.3435,
        2272.0,
        3.9847,
        1047.7473,
        1814.0,
        4.9837,
        6283.0758,
        1639.0,
        3.5646,
        5856.4777,
        1444.0,
        3.7028,
        9437.7629,
        1430.0,
        3.4112,
        10213.2855,
        1125.0,
        4.8282,
        14143.4952,
        1090.0,
        2.0857,
        6812.7668,
        1037.0,
        4.0566,
        71092.8814,
        971.0,
        3.473,
        4694.003,
        915.0,
        1.142,
        6620.890,
        878.0,
        4.440,
        5753.385,
        837.0,
        4.993,
        7084.897,
        770.0,
        5.554,
        167621.576,
        719.0,
        3.602,
        529.691,
        692.0,
        4.326,
        6275.962,
        558.0,
        4.410,
        7860.419,
        529.0,
        2.484,
        4705.732,
        521.0,
        6.250,
        18073.705,
        903.0,
        3.897,
        5507.553,
        618.0,
        1.730,
        5223.694,
        380.0,
        5.244,
        2352.866,
        166.0,
        1.627,
        84334.662,
        10001398880.0,
        0.00000000000,
        0.00000000000,
        167069963.0,
        3.098463508,
        6283.075849991,
        1395602.0,
        3.0552461,
        12566.1517000,
        308372.0,
        5.198467,
        77713.771468,
        162846.0,
        1.173877,
        5753.384885,
        157557.0,
        2.846852,
        7860.419392,
        92480.0,
        5.45292,
        11506.76977,
        54244.0,
        4.56409,
        3930.20970,
        47211.0,
        3.66100,
        5884.92685,
        34598.0,
        0.96369,
        5507.55324,
        32878.0,
        5.89984,
        5223.69392,
        30678.0,
        0.29867,
        5573.14280,
        24319.0,
        4.27350,
        11790.62909,
        21183.0,
        5.84715,
        1577.34354,
        18575.0,
        5.02194,
        10977.07880,
        17484.0,
        3.01194,
        18849.22755,
        10984.0,
        5.05511,
        5486.77784,
        9832.0,
        0.8868,
        6069.7768,
        8650.0,
        5.6896,
        15720.8388,
        8583.0,
        1.2708,
        161000.6857,
        6490.0,
        0.2725,
        17260.1547,
        6292.0,
        0.9218,
        529.6910,
        5706.0,
        2.0137,
        83996.8473,
        5574.0,
        5.2416,
        71430.6956,
        4938.0,
        3.2450,
        2544.3144,
        4696.0,
        2.5781,
        775.5226,
        4466.0,
        5.5372,
        9437.7629,
        4252.0,
        6.0111,
        6275.9623,
        3897.0,
        5.3607,
        4694.0030,
        3825.0,
        2.3926,
        8827.3903,
        3749.0,
        0.8295,
        19651.0485,
        3696.0,
        4.9011,
        12139.5535,
        3566.0,
        1.6747,
        12036.4607,
        3454.0,
        1.8427,
        2942.4634,
        3319.0,
        0.2437,
        7084.8968,
        3192.0,
        0.1837,
        5088.6288,
        3185.0,
        1.7778,
        398.1490,
        2846.0,
        1.2134,
        6286.5990,
        2779.0,
        1.8993,
        6279.5527,
        2628.0,
        4.5890,
        10447.3878,
        2460.0,
        3.7866,
        8429.2413,
        2393.0,
        4.9960,
        5856.4777,
        2359.0,
        0.2687,
        796.2980,
        2329.0,
        2.8078,
        14143.4952,
        2210.0,
        1.9500,
        3154.6871,
        2035.0,
        4.6527,
        2146.1654,
        1951.0,
        5.3823,
        2352.8662,
        1883.0,
        0.6731,
        149854.4001,
        1833.0,
        2.2535,
        23581.2582,
        1796.0,
        0.1987,
        6812.7668,
        1731.0,
        6.1520,
        16730.4637,
        1717.0,
        4.4332,
        10213.2855,
        1619.0,
        5.2316,
        17789.8456,
        1381.0,
        5.1896,
        8031.0923,
        1364.0,
        3.6852,
        4705.7323,
        1314.0,
        0.6529,
        13367.9726,
        1041.0,
        4.3329,
        11769.8537,
        1017.0,
        1.5939,
        4690.4798,
        998.0,
        4.201,
        6309.374,
        966.0,
        3.676,
        27511.468,
        874.0,
        6.064,
        1748.016,
        779.0,
        3.674,
        12168.003,
        771.0,
        0.312,
        7632.943,
        756.0,
        2.626,
        6256.778,
        746.0,
        5.648,
        11926.254,
        693.0,
        2.924,
        6681.225,
        680.0,
        1.423,
        23013.540,
        674.0,
        0.563,
        3340.612,
        663.0,
        5.661,
        11371.705,
        659.0,
        3.136,
        801.821,
        648.0,
        2.650,
        19804.827,
        615.0,
        3.029,
        233141.314,
        612.0,
        5.134,
        1194.447,
        563.0,
        4.341,
        90955.552,
        552.0,
        2.091,
        17298.182,
        534.0,
        5.100,
        31441.678,
        531.0,
        2.407,
        11499.656,
        523.0,
        4.624,
        6438.496,
        513.0,
        5.324,
        11513.883,
        477.0,
        0.256,
        11856.219,
        461.0,
        1.722,
        7234.794,
        458.0,
        3.766,
        6386.169,
        458.0,
        4.466,
        5746.271,
        423.0,
        1.055,
        5760.498,
        422.0,
        1.557,
        7238.676,
        415.0,
        2.599,
        7058.598,
        401.0,
        3.030,
        1059.382,
        397.0,
        1.201,
        1349.867,
        379.0,
        4.907,
        4164.312,
        360.0,
        5.707,
        5643.179,
        352.0,
        3.626,
        244287.600,
        348.0,
        0.761,
        10973.556,
        342.0,
        3.001,
        4292.331,
        336.0,
        4.546,
        4732.031,
        334.0,
        3.138,
        6836.645,
        324.0,
        4.164,
        9917.697,
        316.0,
        1.691,
        11015.106,
        307.0,
        0.238,
        35371.887,
        298.0,
        1.306,
        6283.143,
        298.0,
        1.750,
        6283.009,
        293.0,
        5.738,
        16200.773,
        286.0,
        5.928,
        14712.317,
        281.0,
        3.515,
        21228.392,
        280.0,
        5.663,
        8635.942,
        277.0,
        0.513,
        26.298,
        268.0,
        4.207,
        18073.705,
        266.0,
        0.900,
        12352.853,
        260.0,
        2.962,
        25132.303,
        255.0,
        2.477,
        6208.294,
        242.0,
        2.800,
        709.933,
        231.0,
        1.054,
        22483.849,
        229.0,
        1.070,
        14314.168,
        216.0,
        1.314,
        154717.610,
        215.0,
        6.038,
        10873.986,
        200.0,
        0.561,
        7079.374,
        198.0,
        2.614,
        951.718,
        197.0,
        4.369,
        167283.762,
        186.0,
        2.861,
        5216.580,
        183.0,
        1.660,
        39302.097,
        183.0,
        5.912,
        3738.761,
        175.0,
        2.145,
        6290.189,
        173.0,
        2.168,
        10575.407,
        171.0,
        3.702,
        1592.596,
        171.0,
        1.343,
        3128.389,
        164.0,
        5.550,
        6496.375,
        164.0,
        5.856,
        10984.192,
        161.0,
        1.998,
        10969.965,
        161.0,
        1.909,
        6133.513,
        157.0,
        4.955,
        25158.602,
        154.0,
        6.216,
        23543.231,
        153.0,
        5.357,
        13521.751,
        150.0,
        5.770,
        18209.330,
        150.0,
        5.439,
        155.420,
        139.0,
        1.778,
        9225.539,
        139.0,
        1.626,
        5120.601,
        128.0,
        2.460,
        13916.019,
        123.0,
        0.717,
        143571.324,
        122.0,
        2.654,
        88860.057,
        121.0,
        4.414,
        3894.182,
        121.0,
        1.192,
        3.523,
        120.0,
        4.030,
        553.569,
        119.0,
        1.513,
        17654.781,
        117.0,
        3.117,
        14945.316,
        113.0,
        2.698,
        6040.347,
        110.0,
        3.085,
        43232.307,
        109.0,
        0.998,
        955.600,
        108.0,
        2.939,
        17256.632,
        107.0,
        5.285,
        65147.620,
        103.0,
        0.139,
        11712.955,
        103.0,
        5.850,
        213.299,
        102.0,
        3.046,
        6037.244,
        101.0,
        2.842,
        8662.240,
        100.0,
        3.626,
        6262.300,
        98.0,
        2.36,
        6206.81,
        98.0,
        5.11,
        6172.87,
        98.0,
        2.00,
        15110.47,
        97.0,
        2.67,
        5650.29,
        97.0,
        2.75,
        6244.94,
        96.0,
        4.02,
        6282.10,
        96.0,
        5.31,
        6284.06,
        92.0,
        0.10,
        29088.81,
        85.0,
        3.26,
        20426.57,
        84.0,
        2.60,
        28766.92,
        81.0,
        3.58,
        10177.26,
        80.0,
        5.81,
        5230.81,
        78.0,
        2.53,
        16496.36,
        77.0,
        4.06,
        6127.66,
        73.0,
        0.04,
        5481.25,
        72.0,
        5.96,
        12559.04,
        72.0,
        5.92,
        4136.91,
        71.0,
        5.49,
        22003.91,
        70.0,
        3.41,
        7.11,
        69.0,
        0.62,
        11403.68,
        69.0,
        3.90,
        1589.07,
        69.0,
        1.96,
        12416.59,
        69.0,
        4.51,
        426.60,
        67.0,
        1.61,
        11087.29,
        66.0,
        4.50,
        47162.52,
        66.0,
        5.08,
        283.86,
        66.0,
        4.32,
        16858.48,
        65.0,
        1.04,
        6062.66,
        64.0,
        1.59,
        18319.54,
        63.0,
        5.70,
        45892.73,
        63.0,
        4.60,
        66567.49,
        63.0,
        3.82,
        13517.87,
        62.0,
        2.62,
        11190.38,
        61.0,
        1.54,
        33019.02,
        60.0,
        5.58,
        10344.30,
        60.0,
        5.38,
        316428.23,
        60.0,
        5.78,
        632.78,
        59.0,
        6.12,
        9623.69,
        57.0,
        0.16,
        17267.27,
        57.0,
        3.86,
        6076.89,
        57.0,
        1.98,
        7668.64,
        56.0,
        4.78,
        20199.09,
        55.0,
        4.56,
        18875.53,
        55.0,
        3.51,
        17253.04,
        54.0,
        3.07,
        226858.24,
        54.0,
        4.83,
        18422.63,
        53.0,
        5.02,
        12132.44,
        52.0,
        3.63,
        5333.90,
        52.0,
        0.97,
        155427.54,
        51.0,
        3.36,
        20597.24,
        50.0,
        0.99,
        11609.86,
        50.0,
        2.21,
        1990.75,
        48.0,
        1.62,
        12146.67,
        48.0,
        1.17,
        12569.67,
        47.0,
        4.62,
        5436.99,
        47.0,
        1.81,
        12562.63,
        47.0,
        0.59,
        21954.16,
        47.0,
        0.76,
        7342.46,
        46.0,
        0.27,
        4590.91,
        46.0,
        3.77,
        156137.48,
        45.0,
        5.66,
        10454.50,
        44.0,
        5.84,
        3496.03,
        43.0,
        0.24,
        17996.03,
        41.0,
        5.93,
        51092.73,
        41.0,
        4.21,
        12592.45,
        40.0,
        5.14,
        1551.05,
        40.0,
        5.28,
        15671.08,
        39.0,
        3.69,
        18052.93,
        39.0,
        4.94,
        24356.78,
        38.0,
        2.72,
        11933.37,
        38.0,
        5.23,
        7477.52,
        38.0,
        4.99,
        9779.11,
        37.0,
        3.70,
        9388.01,
        37.0,
        4.44,
        4535.06,
        36.0,
        2.16,
        28237.23,
        36.0,
        2.54,
        242.73,
        36.0,
        0.22,
        5429.88,
        35.0,
        6.15,
        19800.95,
        35.0,
        2.92,
        36949.23,
        34.0,
        5.63,
        2379.16,
        34.0,
        5.73,
        16460.33,
        34.0,
        5.11,
        5849.36,
        33.0,
        6.19,
        6268.85,
        10301861.0,
        1.10748970,
        6283.07584999,
        172124.0,
        1.064423,
        12566.151700,
        70222.0,
        3.14159,
        0.00000,
        3235.0,
        1.0217,
        18849.2275,
        3080.0,
        2.8435,
        5507.5532,
        2497.0,
        1.3191,
        5223.6939,
        1849.0,
        1.4243,
        1577.3435,
        1008.0,
        5.9138,
        10977.0788,
        865.0,
        1.420,
        6275.962,
        863.0,
        0.271,
        5486.778,
        507.0,
        1.686,
        5088.629,
        499.0,
        6.014,
        6286.599,
        467.0,
        5.987,
        529.691,
        440.0,
        0.518,
        4694.003,
        410.0,
        1.084,
        9437.763,
        387.0,
        4.750,
        2544.314,
        375.0,
        5.071,
        796.298,
        352.0,
        0.023,
        83996.847,
        344.0,
        0.949,
        71430.696,
        341.0,
        5.412,
        775.523,
        322.0,
        6.156,
        2146.165,
        286.0,
        5.484,
        10447.388,
        284.0,
        3.420,
        2352.866,
        255.0,
        6.132,
        6438.496,
        252.0,
        0.243,
        398.149,
        243.0,
        3.092,
        4690.480,
        225.0,
        3.689,
        7084.897,
        220.0,
        4.952,
        6812.767,
        219.0,
        0.420,
        8031.092,
        209.0,
        1.282,
        1748.016,
        193.0,
        5.314,
        8429.241,
        185.0,
        1.820,
        7632.943,
        175.0,
        3.229,
        6279.553,
        173.0,
        1.537,
        4705.732,
        158.0,
        4.097,
        11499.656,
        158.0,
        5.539,
        3154.687,
        150.0,
        3.633,
        11513.883,
        148.0,
        3.222,
        7234.794,
        147.0,
        3.653,
        1194.447,
        144.0,
        0.817,
        14143.495,
        135.0,
        6.151,
        5746.271,
        134.0,
        4.644,
        6836.645,
        128.0,
        2.693,
        1349.867,
        123.0,
        5.650,
        5760.498,
        118.0,
        2.577,
        13367.973,
        113.0,
        3.357,
        17789.846,
        110.0,
        4.497,
        4292.331,
        108.0,
        5.828,
        12036.461,
        102.0,
        5.621,
        6256.778,
        99.0,
        1.14,
        1059.38,
        98.0,
        0.66,
        5856.48,
        93.0,
        2.32,
        10213.29,
        92.0,
        0.77,
        16730.46,
        88.0,
        1.50,
        11926.25,
        86.0,
        1.42,
        5753.38,
        85.0,
        0.66,
        155.42,
        81.0,
        1.64,
        6681.22,
        80.0,
        4.11,
        951.72,
        66.0,
        4.55,
        5216.58,
        65.0,
        0.98,
        25132.30,
        64.0,
        4.19,
        6040.35,
        64.0,
        0.52,
        6290.19,
        63.0,
        1.51,
        5643.18,
        59.0,
        6.18,
        4164.31,
        57.0,
        2.30,
        10973.56,
        55.0,
        2.32,
        11506.77,
        55.0,
        2.20,
        1592.60,
        55.0,
        5.27,
        3340.61,
        54.0,
        5.54,
        553.57,
        53.0,
        5.04,
        9917.70,
        53.0,
        0.92,
        11371.70,
        52.0,
        3.98,
        17298.18,
        52.0,
        3.60,
        10969.97,
        49.0,
        5.91,
        3894.18,
        49.0,
        2.51,
        6127.66,
        48.0,
        1.67,
        12168.00,
        46.0,
        0.31,
        801.82,
        42.0,
        3.70,
        10575.41,
        42.0,
        4.05,
        10984.19,
        40.0,
        2.17,
        7860.42,
        40.0,
        4.17,
        26.30,
        38.0,
        5.82,
        7058.60,
        37.0,
        3.39,
        6496.37,
        36.0,
        1.08,
        6309.37,
        36.0,
        5.34,
        7079.37,
        34.0,
        3.62,
        11790.63,
        32.0,
        0.32,
        16200.77,
        31.0,
        4.24,
        3738.76,
        29.0,
        4.55,
        11856.22,
        29.0,
        1.26,
        8635.94,
        27.0,
        3.45,
        5884.93,
        26.0,
        5.08,
        10177.26,
        26.0,
        5.38,
        21228.39,
        24.0,
        2.26,
        11712.96,
        24.0,
        1.05,
        242.73,
        24.0,
        5.59,
        6069.78,
        23.0,
        3.63,
        6284.06,
        23.0,
        1.64,
        4732.03,
        22.0,
        3.46,
        213.30,
        21.0,
        1.05,
        3496.03,
        21.0,
        3.92,
        13916.02,
        21.0,
        4.01,
        5230.81,
        20.0,
        5.16,
        12352.85,
        20.0,
        0.69,
        1990.75,
        19.0,
        2.73,
        6062.66,
        19.0,
        5.01,
        11015.11,
        18.0,
        6.04,
        6283.01,
        18.0,
        2.85,
        7238.68,
        18.0,
        5.60,
        6283.14,
        18.0,
        5.16,
        17253.04,
        18.0,
        2.54,
        14314.17,
        17.0,
        1.58,
        7.11,
        17.0,
        0.98,
        3930.21,
        17.0,
        4.75,
        17267.27,
        16.0,
        2.19,
        6076.89,
        16.0,
        2.19,
        18073.70,
        16.0,
        6.12,
        3.52,
        16.0,
        4.61,
        9623.69,
        16.0,
        3.40,
        16496.36,
        15.0,
        0.19,
        9779.11,
        15.0,
        5.30,
        13517.87,
        15.0,
        4.26,
        3128.39,
        15.0,
        0.81,
        709.93,
        14.0,
        0.50,
        25158.60,
        14.0,
        4.38,
        4136.91,
        13.0,
        0.98,
        65147.62,
        13.0,
        3.31,
        154717.61,
        13.0,
        2.11,
        1589.07,
        13.0,
        1.92,
        22483.85,
        12.0,
        6.03,
        9225.54,
        12.0,
        1.53,
        12559.04,
        12.0,
        5.82,
        6282.10,
        12.0,
        5.61,
        5642.20,
        12.0,
        2.38,
        167283.76,
        12.0,
        0.39,
        12132.44,
        12.0,
        3.98,
        4686.89,
        12.0,
        5.81,
        12569.67,
        12.0,
        0.56,
        5849.36,
        11.0,
        0.45,
        6172.87,
        11.0,
        5.80,
        16858.48,
        11.0,
        6.22,
        12146.67,
        11.0,
        2.27,
        5429.88,
        435939.0,
        5.784551,
        6283.075850,
        12363.0,
        5.57935,
        12566.15170,
        1234.0,
        3.1416,
        0.0000,
        879.0,
        3.628,
        77713.771,
        569.0,
        1.870,
        5573.143,
        330.0,
        5.470,
        18849.228,
        147.0,
        4.480,
        5507.553,
        110.0,
        2.842,
        161000.686,
        101.0,
        2.815,
        5223.694,
        85.0,
        3.11,
        1577.34,
        65.0,
        5.47,
        775.52,
        61.0,
        1.38,
        6438.50,
        50.0,
        4.42,
        6286.60,
        47.0,
        3.66,
        7084.90,
        46.0,
        5.39,
        149854.40,
        42.0,
        0.90,
        10977.08,
        40.0,
        3.20,
        5088.63,
        35.0,
        1.81,
        5486.78,
        32.0,
        5.35,
        3154.69,
        30.0,
        3.52,
        796.30,
        29.0,
        4.62,
        4690.48,
        28.0,
        1.84,
        4694.00,
        27.0,
        3.14,
        71430.70,
        27.0,
        6.17,
        6836.65,
        26.0,
        1.42,
        2146.17,
        25.0,
        2.81,
        1748.02,
        24.0,
        2.18,
        155.42,
        23.0,
        4.76,
        7234.79,
        21.0,
        3.38,
        7632.94,
        21.0,
        0.22,
        4705.73,
        20.0,
        4.22,
        1349.87,
        20.0,
        2.01,
        1194.45,
        20.0,
        4.58,
        529.69,
        19.0,
        1.59,
        6309.37,
        18.0,
        5.70,
        6040.35,
        18.0,
        6.03,
        4292.33,
        17.0,
        2.90,
        9437.76,
        17.0,
        2.00,
        8031.09,
        17.0,
        5.78,
        83996.85,
        16.0,
        0.05,
        2544.31,
        15.0,
        0.95,
        6127.66,
        14.0,
        0.36,
        10447.39,
        14.0,
        1.48,
        2352.87,
        13.0,
        0.77,
        553.57,
        13.0,
        5.48,
        951.72,
        13.0,
        5.27,
        6279.55,
        13.0,
        3.76,
        6812.77,
        11.0,
        5.41,
        6256.78,
        10.0,
        0.68,
        1592.60,
        10.0,
        4.95,
        398.15,
        10.0,
        1.15,
        3894.18,
        10.0,
        5.20,
        244287.60,
        10.0,
        1.94,
        11856.22,
        9.0,
        5.39,
        25132.30,
        8.0,
        6.18,
        1059.38,
        8.0,
        0.69,
        8429.24,
        8.0,
        5.85,
        242.73,
        7.0,
        5.26,
        14143.50,
        7.0,
        0.52,
        801.82,
        6.0,
        2.24,
        8635.94,
        6.0,
        4.00,
        13367.97,
        6.0,
        2.77,
        90955.55,
        6.0,
        5.17,
        7058.60,
        5.0,
        1.46,
        233141.31,
        5.0,
        4.13,
        7860.42,
        5.0,
        3.91,
        26.30,
        5.0,
        3.89,
        12036.46,
        5.0,
        5.58,
        6290.19,
        5.0,
        5.54,
        1990.75,
        5.0,
        0.83,
        11506.77,
        5.0,
        6.22,
        6681.22,
        4.0,
        5.26,
        10575.41,
        4.0,
        1.91,
        7477.52,
        4.0,
        0.43,
        10213.29,
        4.0,
        1.09,
        709.93,
        4.0,
        5.09,
        11015.11,
        4.0,
        4.22,
        88860.06,
        4.0,
        3.57,
        7079.37,
        4.0,
        1.98,
        6284.06,
        4.0,
        3.93,
        10973.56,
        4.0,
        6.18,
        9917.70,
        4.0,
        0.36,
        10177.26,
        4.0,
        2.75,
        3738.76,
        4.0,
        3.33,
        5643.18,
        4.0,
        5.36,
        25158.60,
        14459.0,
        4.27319,
        6283.07585,
        673.0,
        3.917,
        12566.152,
        77.0,
        0.00,
        0.00,
        25.0,
        3.73,
        18849.23,
        4.0,
        2.80,
        6286.60,
        386.0,
        2.564,
        6283.076,
        31.0,
        2.27,
        12566.15,
        5.0,
        3.44,
        5573.14,
        2.0,
        2.05,
        18849.23,
        1.0,
        2.06,
        77713.77,
        1.0,
        4.41,
        161000.69,
        1.0,
        3.82,
        149854.40,
        1.0,
        4.08,
        6127.66,
        1.0,
        5.26,
        6438.50,
        9.0,
        1.22,
        6283.08,
        1.0,
        0.66,
        12566.15
    )

    private val QI_KB = doubleArrayOf(
        1640650.479938,
        15.21842500,
        1642476.703182,
        15.21874996,
        1683430.515601,
        15.218750011,
        1752157.640664,
        15.218749978,
        1807675.003759,
        15.218620279,
        1883627.765182,
        15.218612292,
        1907369.128100,
        15.218449176,
        1936603.140413,
        15.218425000,
        1939145.524180,
        15.218466998,
        1947180.798300,
        15.218524844,
        1964362.041824,
        15.218533526,
        1987372.340971,
        15.218513908,
        1999653.819126,
        15.218530782,
        2007445.469786,
        15.218535181,
        2021324.917146,
        15.218526248,
        2047257.232342,
        15.218519654,
        2070282.898213,
        15.218425000,
        2073204.872850,
        15.218515221,
        2080144.500926,
        15.218530782,
        2086703.688963,
        15.218523776,
        2110033.182763,
        15.218425000,
        2111190.300888,
        15.218425000,
        2113731.271005,
        15.218515671,
        2120670.840263,
        15.218425000,
        2123973.309063,
        15.218425000,
        2125068.997336,
        15.218477932,
        2136026.312633,
        15.218472436,
        2156099.495538,
        15.218425000,
        2159021.324663,
        15.218425000,
        2162308.575254,
        15.218461742,
        2178485.706538,
        15.218425000,
        2178759.662849,
        15.218445786,
        2185334.020800,
        15.218425000,
        2187525.481425,
        15.218425000,
        2188621.191481,
        15.218437494,
        2322147.76
    )

    private val QB =


    /** 农历年  */
    private var year = 0

    /** 农历月，闰月为负，即闰2月=-2  */
    private var month = 0

    /** 农历日  */
    private var day = 0

    /** 对应阳历  */
    private var solar: Solar

    /** 相对于基准日的偏移天数  */
    private var dayOffset = 0

    /** 时对应的天干下标，0-9  */
    private var timeGanIndex = 0

    /** 时对应的地支下标，0-11  */
    private var timeZhiIndex = 0

    /** 日对应的天干下标，0-9  */
    private var dayGanIndex = 0

    /** 日对应的地支下标，0-11  */
    private var dayZhiIndex = 0

    /** 日对应的天干下标（最精确的，供八字用，晚子时算第二天），0-9  */
    private var dayGanIndexExact = 0

    /** 日对应的地支下标（最精确的，供八字用，晚子时算第二天），0-11  */
    private var dayZhiIndexExact = 0

    /** 月对应的天干下标（以节交接当天起算），0-9  */
    private var monthGanIndex = 0

    /** 月对应的地支下标（以节交接当天起算），0-11  */
    private var monthZhiIndex = 0

    /** 月对应的天干下标（最精确的，供八字用，以节交接时刻起算），0-9  */
    private var monthGanIndexExact = 0

    /** 月对应的地支下标（最精确的，供八字用，以节交接时刻起算），0-11  */
    private var monthZhiIndexExact = 0

    /** 年对应的天干下标（国标，以正月初一为起点），0-9  */
    private var yearGanIndex = 0

    /** 年对应的地支下标（国标，以正月初一为起点），0-11  */
    private var yearZhiIndex = 0

    /** 年对应的天干下标（月干计算用，以立春为起点），0-9  */
    private var yearGanIndexByLiChun = 0

    /** 年对应的地支下标（月支计算用，以立春为起点），0-11  */
    private var yearZhiIndexByLiChun = 0

    /** 年对应的天干下标（最精确的，供八字用，以立春交接时刻为起点），0-9  */
    private var yearGanIndexExact = 0

    /** 年对应的地支下标（最精确的，供八字用，以立春交接时刻为起点），0-11  */
    private var yearZhiIndexExact = 0

    /** 周下标，0-6  */
    private var weekIndex = 0

    /** 阳历小时  */
    private var hour = 0

    /** 阳历分钟  */
    private var minute = 0

    /** 阳历秒钟  */
    private var second = 0

    /** 八字  */
    val eightChar by lazy { EightChar(this) }

    /** 24节气表（对应阳历的准确时刻）  */
    private val jieQi: MutableMap<String, Solar> = LinkedHashMap()

    companion object {
        /** 节气表头部追加农历上年末的节气名(节令：大雪)，以示区分  */
        private const val JIE_QI_PREPEND = "DA_XUE"

        /** 节气表尾部追加农历下年初的节气名(气令：冬至)，以示区分  */
        private const val JIE_QI_APPEND = "DONG_ZHI"

        /** 农历年初节气名(气令：冬至)  */
        private const val JIE_QI_FIRST = "冬至"

        /** 农历年末节气名(节令：大雪)  */
        private const val JIE_QI_LAST = "大雪"

        /**
         * 通过指定阳历日期获取农历
         *
         * @param date 阳历日期
         * @return 农历
         */
        fun fromDate(date: Date): Lunar {
            return Lunar(date)
        }

        /**
         * 通过指定农历年月日获取农历
         *
         * @param lunarYear 年（农历）
         * @param lunarMonth 月（农历），1到12，闰月为负，即闰2月=-2
         * @param lunarDay 日（农历），1到31
         * @return 农历
         */
        fun fromYmd(lunarYear: Int, lunarMonth: Int, lunarDay: Int): Lunar {
            return Lunar(lunarYear, lunarMonth, lunarDay)
        }

        /**
         * 通过指定农历年月日获取农历
         *
         * @param lunarYear 年（农历）
         * @param lunarMonth 月（农历），1到12，闰月为负，即闰2月=-2
         * @param lunarDay 日（农历），1到31
         * @param hour 小时（阳历）
         * @param minute 分钟（阳历）
         * @param second 秒钟（阳历）
         * @return 农历
         */
        fun fromYmdHms(
            lunarYear: Int,
            lunarMonth: Int,
            lunarDay: Int,
            hour: Int,
            minute: Int,
            second: Int
        ): Lunar {
            return Lunar(lunarYear, lunarMonth, lunarDay, hour, minute, second)
        }
    }

    /**
     * 默认使用当前日期初始化
     */
    constructor() : this(Date())

    /**
     * 通过农历年月日初始化
     *
     * @param lunarYear 年（农历）
     * @param lunarMonth 月（农历），1到12，闰月为负，即闰2月=-2
     * @param lunarDay 日（农历），1到30
     */
    constructor(
        lunarYear: Int,
        lunarMonth: Int,
        lunarDay: Int
    ) : this(lunarYear, lunarMonth, lunarDay, 0, 0, 0)

    /**
     * 通过农历年月日时初始化
     *
     * @param lunarYear 年（农历）
     * @param lunarMonth 月（农历），1到12，闰月为负，即闰2月=-2
     * @param lunarDay 日（农历），1到30
     * @param hour 小时（阳历）
     * @param minute 分钟（阳历）
     * @param second 秒钟（阳历）
     */
    constructor(
        lunarYear: Int,
        lunarMonth: Int,
        lunarDay: Int,
        hour: Int,
        minute: Int,
        second: Int
    ) {
        val m = abs(lunarMonth)
        require(!(m < 1 || m > 12)) { "lunar month must between 1 and 12, or negative" }
        if (lunarMonth < 0) {
            val leapMonth = getLeapMonth(lunarYear)
            require(leapMonth != 0) {
                String.format(
                    "no leap month in lunar year %d",
                    lunarYear
                )
            }
            require(leapMonth == m) {
                String.format(
                    "leap month is %d in lunar year %d",
                    leapMonth,
                    lunarYear
                )
            }
        }
        require(!(lunarDay < 1 || lunarDay > 30)) { "lunar day must between 1 and 30" }
        val days = getDaysOfMonth(lunarYear, lunarMonth)
        require(lunarDay <= days) {
            String.format(
                "only %d days in lunar year %d month %d",
                days,
                lunarYear,
                lunarMonth
            )
        }
        year = lunarYear
        month = lunarMonth
        day = lunarDay
        this.hour = hour
        this.minute = minute
        this.second = second
        dayOffset = LunarUtil.computeAddDays(year, month, day)
        solar = toSolar()
        compute()
    }

    /**
     * 通过阳历日期初始化
     * @param date 阳历日期
     */
    constructor(date: Date) {
        solar = Solar(date)
        val y = solar.getYear()
        val m = solar.getMonth()
        val d = solar.getDay()
        val startYear: Int
        val startMonth: Int
        val startDay: Int
        var lunarYear: Int
        var lunarMonth: Int
        var lunarDay: Int
        if (y < 2000) {
            startYear = SolarUtil.BASE_YEAR
            startMonth = SolarUtil.BASE_MONTH
            startDay = SolarUtil.BASE_DAY
            lunarYear = LunarUtil.BASE_YEAR
            lunarMonth = LunarUtil.BASE_MONTH
            lunarDay = LunarUtil.BASE_DAY
        } else {
            startYear = SolarUtil.BASE_YEAR + 99
            startMonth = 1
            startDay = 1
            lunarYear = LunarUtil.BASE_YEAR + 99
            lunarMonth = 11
            lunarDay = 25
        }
        var diff = 0
        for (i in startYear until y) {
            diff += 365
            if (SolarUtil.isLeapYear(i)) {
                diff += 1
            }
        }
        for (i in startMonth until m) {
            diff += SolarUtil.getDaysOfMonth(y, i)
        }
        diff += d - startDay
        lunarDay += diff
        var lastDate = getDaysOfMonth(lunarYear, lunarMonth)
        while (lunarDay > lastDate) {
            lunarDay -= lastDate
            lunarMonth = LunarUtil.nextMonth(lunarYear, lunarMonth)
            if (lunarMonth == 1) {
                lunarYear++
            }
            lastDate = getDaysOfMonth(lunarYear, lunarMonth)
        }
        year = lunarYear
        month = lunarMonth
        day = lunarDay
        hour = solar.getHour()
        minute = solar.getMinute()
        second = solar.getSecond()
        dayOffset = LunarUtil.computeAddDays(year, month, day)
        compute()
    }

    private fun nutationLon2(t: Double): Double {
        var a: Double
        val t2 = t * t
        var dl = 0.0
        var i = 0
        val j = NUT_B.size
        while (i < j) {
            a = if (i == 0) {
                -1.742 * t
            } else {
                0.0
            }
            dl += (NUT_B[i + 3] + a) * sin(NUT_B[i] + NUT_B[i + 1] * t + NUT_B[i + 2] * t2)
            i += 5
        }
        return dl / 100 / SECOND_PER_RAD
    }

    private fun eLon(t: Double, n: Int): Double {
        var t1 = t
        t1 /= 10.0
        var v = 0.0
        var tn = 1.0
        var n1: Int
        var n2: Int
        var m: Double
        var c: Double
        val pn = 1
        var n0: Double
        val m0 = XL0[pn + 1] - XL0[pn]
        var i = 0
        while (i < 6) {
            n1 = XL0[pn + i].toInt()
            n2 = XL0[pn + 1 + i].toInt()
            n0 = n2 - n1.toDouble()
            if (n0 == 0.0) {
                i++
                tn *= t1
                continue
            }
            if (n < 0) {
                m = n2.toDouble()
            } else {
                m = (3 * n * n0 / m0 + 0.5).toInt() + n1.toDouble()
                if (i != 0) {
                    m += 3.0
                }
                if (m > n2) {
                    m = n2.toDouble()
                }
            }
            c = 0.0
            var j = n1
            while (j < m) {
                c += XL0[j] * cos(XL0[j + 1] + t1 * XL0[j + 2])
                j += 3
            }
            v += c * tn
            i++
            tn *= t1
        }
        v /= XL0[0]
        val t2 = t1 * t1
        val t3 = t2 * t1
        v += (-0.0728 - 2.7702 * t1 - 1.1019 * t2 - 0.0996 * t3) / SECOND_PER_RAD
        return v
    }

    private fun gxcSunLon(t: Double): Double {
        val v = -0.043126 + 628.301955 * t - 0.000002732 * t * t
        val e = 0.016708634 - 0.000042037 * t - 0.0000001267 * t * t
        return -20.49552 * (1 + e * cos(v)) / SECOND_PER_RAD
    }

    private fun ev(t: Double): Double {
        val f = 628.307585 * t
        return 628.332 + 21 * sin(1.527 + f) + 0.44 * sin(1.48 + f * 2) + 0.129 * sin(
            5.82 + f
        ) * t + 0.00055 * sin(4.21 + f) * t * t
    }

    private fun saLon(t: Double, n: Int): Double {
        return eLon(t, n) + nutationLon2(t) + gxcSunLon(t) + Math.PI
    }

    private fun dtExt(y: Double, jsd: Double): Double {
        val dy = (y - 1820) / 100
        return -20 + jsd * dy * dy
    }

    private fun dtCalc(y: Double): Double {
        val size = DT_AT.size
        val y0 = DT_AT[size - 2]
        val t0 = DT_AT[size - 1]
        if (y >= y0) {
            val jsd = 31.0
            if (y > y0 + 100) {
                return dtExt(y, jsd)
            }
            val v = dtExt(y, jsd)
            val dv = dtExt(y0, jsd) - t0
            return v - dv * (y0 + 100 - y) / 100
        }
        var i = 0
        while (i < size) {
            if (y < DT_AT[i + 5]) {
                break
            }
            i += 5
        }
        val t1 = (y - DT_AT[i]) / (DT_AT[i + 5] - DT_AT[i]) * 10
        val t2 = t1 * t1
        val t3 = t2 * t1
        return DT_AT[i + 1] + DT_AT[i + 2] * t1 + DT_AT[i + 3] * t2 + DT_AT[i + 4] * t3
    }

    private fun dtT(t: Double): Double {
        return dtCalc(t / 365.2425 + 2000) / 86400.0
    }

    private fun saLonT(w: Double): Double {
        var t: Double
        var v = 628.3319653318
        t = (w - 1.75347 - Math.PI) / v
        v = ev(t)
        t += (w - saLon(t, 10)) / v
        v = ev(t)
        t += (w - saLon(t, -1)) / v
        return t
    }

    private fun qiLow(w: Double): Double {
        var t: Double
        val l: Double
        val v = 628.3319653318
        t = (w - 4.895062166) / v
        t -= (53 * t * t + 334116 * cos(4.67 + 628.307585 * t) + 2061 * cos(2.678 + 628.3076 * t) * t) / v / 10000000
        l =
            48950621.66 + 6283319653.318 * t + 53 * t * t + 334166 * cos(4.669257 + 628.307585 * t) + 3489 * cos(
                4.6261 + 1256.61517 * t
            ) + 2060.6 * cos(2.67823 + 628.307585 * t) * t - 994 - 834 * sin(2.1824 - 33.75705 * t)
        t -= (l / 10000000 - w) / 628.332 + (32 * (t + 1.8) * (t + 1.8) - 20) / 86400 / 36525
        return t * 36525 + 8 / 24
    }

    private fun saLonT2(w: Double): Double {
        var t: Double
        val v = 628.3319653318
        t = (w - 1.75347 - Math.PI) / v
        t -= (0.000005297 * t * t + 0.0334166 * cos(4.669257 + 628.307585 * t) + 0.0002061 * cos(
            2.67823 + 628.307585 * t
        ) * t) / v
        t += (w - eLon(
            t,
            8
        ) - Math.PI + (20.5 + 17.2 * sin(2.1824 - 33.75705 * t)) / SECOND_PER_RAD) / v
        return t
    }

    private fun qiHigh(w: Double): Double {
        var t = saLonT2(w) * 36525
        t = t - dtT(t) + 8 / 24
        val v = (t + 0.5) % 1 * 86400
        if (v < 1200 || v > 86400 - 1200) {
            t = saLonT(w) * 36525 - dtT(t) + 8 / 24
        }
        return t
    }

    private fun calcJieQi(jd: Double): Double {
        var jd1 = jd
        val size = QI_KB.size
        var d = 0.0
        val pc = 7
        jd1 += 2451545.0
        val f1 = QI_KB[0] - pc
        val f2 = QI_KB[size - 1] - pc
        val f3 = 2436935.0
        if (jd1 < f1 || jd1 >= f3) {
            d = floor(qiHigh(floor((jd1 + pc - 2451259) * 24.0 / 365.2422) * Math.PI / 12) + 0.5)
        } else if (jd1 >= f1 && jd1 < f2) {
            var i = 0
            while (i < size) {
                if (jd1 + pc < QI_KB[i + 2]) {
                    break
                }
                i += 2
            }
            d = QI_KB[i] + QI_KB[i + 1] * floor((jd1 + pc - QI_KB[i]) / QI_KB[i + 1])
            d = floor(d + 0.5)
            if (d == 1683460.0) {
                d++
            }
            d -= 2451545.0
        } else if (jd1 >= f2 && jd1 < f3) {
            d = floor(qiLow(floor((jd1 + pc - 2451259) * 24.0 / 365.2422) * Math.PI / 12) + 0.5)
            val from = ((jd1 - f2) / 365.2422 * 24).toInt()
            val n = QB.substring(from, from + 1)
            if ("1" == n) {
                d += 1.0
            }
            if ("2" == n) {
                d -= 1.0
            }
        }
        return d
    }

    private fun qiAccurate(w: Double): Double {
        val t = saLonT(w) * 36525
        return t - dtT(t) + 8 * 1.0 / 24
    }

    private fun qiAccurate2(jd: Double): Double {
        val d = Math.PI / 12
        val w = floor((jd + 293) * 24 / 365.2422) * d
        val a = qiAccurate(w)
        if (a - jd > 5) {
            return qiAccurate(w - d)
        } else if (a - jd < -5) {
            return qiAccurate(w + d)
        }
        return a
    }

    /**
     * 计算节气表
     */
    private fun computeJieQi() {
        val jd = floor((solar.getYear() - 2000) * 365.2422 + 180)
        var w = floor((jd - 355 + 183) / 365.2422) * 365.2422 + 355
        if (calcJieQi(w) > jd) {
            w -= 365.2422
        }
        //追加上一农历年末的大雪
        var q = calcJieQi(w - 15.2184)
        jieQi[JIE_QI_PREPEND] = Solar.fromJulianDay(qiAccurate2(q) + Solar.J2000)
        val size = JIE_QI.size
        for (i in 0 until size) {
            q = calcJieQi(w + 15.2184 * i)
            jieQi[JIE_QI[i]] = Solar.fromJulianDay(qiAccurate2(q) + Solar.J2000)
        }
        //追加下一农历年的冬至
        q = calcJieQi(w + 15.2184 * size)
        jieQi[JIE_QI_APPEND] = Solar.fromJulianDay(qiAccurate2(q) + Solar.J2000)
    }

    /**
     * 计算干支纪年
     */
    private fun computeYear() {
        //以正月初一开始
        yearGanIndex = (year + LunarUtil.BASE_YEAR_GANZHI_INDEX) % 10
        yearZhiIndex = (year + LunarUtil.BASE_YEAR_GANZHI_INDEX) % 12

        //以立春作为新一年的开始的干支纪年
        var g = yearGanIndex
        var z = yearZhiIndex

        //精确的干支纪年，以立春交接时刻为准
        var gExact = yearGanIndex
        var zExact = yearZhiIndex

        //获取立春的阳历时刻
        val liChun = jieQi["立春"] ?: Solar()

        //阳历和阴历年份相同代表正月初一及以后
        if (year == solar.getYear()) {
            //立春日期判断
            if (solar.toYmd() < liChun.toYmd()) {
                g--
                z--
            }
            //立春交接时刻判断
            if (solar.toYmdHms() < liChun.toYmdHms()) {
                gExact--
                zExact--
            }
        } else {
            if (solar.toYmd() >= liChun.toYmd()) {
                g++
                z++
            }
            if (solar.toYmdHms() >= liChun.toYmdHms()) {
                gExact++
                zExact++
            }
        }
        if (g < 0) {
            g += 10
        }
        if (g >= 10) {
            g -= 10
        }
        if (z < 0) {
            z += 12
        }
        if (z >= 12) {
            z -= 12
        }
        if (gExact < 0) {
            gExact += 10
        }
        if (gExact >= 10) {
            gExact -= 10
        }
        if (zExact < 0) {
            zExact += 12
        }
        if (zExact >= 12) {
            zExact -= 12
        }
        yearGanIndexByLiChun = g
        yearZhiIndexByLiChun = z
        yearGanIndexExact = gExact
        yearZhiIndexExact = zExact
    }

    /**
     * 干支纪月计算
     */
    private fun computeMonth() {
        var start: Solar? = null
        var end: Solar?
        //干偏移值（以立春当天起算）
        val gOffset = (yearGanIndexByLiChun % 5 + 1) * 2 % 10
        //干偏移值（以立春交接时刻起算）
        val gOffsetExact = (yearGanIndexExact % 5 + 1) * 2 % 10

        //序号：大雪到小寒之间-2，小寒到立春之间-1，立春之后0
        var index = -2
        for (jie in LunarUtil.JIE) {
            end = jieQi[jie]
            val ymd = solar.toYmd()
            val symd = start?.toYmd() ?: ymd
            val eymd = end?.toYmd() ?: ""
            if (ymd >= symd && ymd < eymd) {
                break
            }
            start = end
            index++
        }
        if (index < 0) {
            index += 12
        }
        monthGanIndex = (index + gOffset) % 10
        monthZhiIndex = (index + LunarUtil.BASE_MONTH_ZHI_INDEX) % 12

        //序号：大雪到小寒之间-2，小寒到立春之间-1，立春之后0
        var indexExact = -2
        for (jie in LunarUtil.JIE) {
            end = jieQi[jie]
            val time = solar.toYmdHms()
            val stime = start?.toYmdHms() ?: time
            val etime = end?.toYmdHms() ?: ""
            if (time >= stime && time < etime) {
                break
            }
            start = end
            indexExact++
        }
        if (indexExact < 0) {
            indexExact += 12
        }
        monthGanIndexExact = (indexExact + gOffsetExact) % 10
        monthZhiIndexExact = (indexExact + LunarUtil.BASE_MONTH_ZHI_INDEX) % 12
    }

    /**
     * 干支纪日计算
     */
    private fun computeDay() {
        val addDays = (dayOffset + LunarUtil.BASE_DAY_GANZHI_INDEX) % 60
        dayGanIndex = addDays % 10
        dayZhiIndex = addDays % 12
        var dayGanExact = dayGanIndex
        var dayZhiExact = dayZhiIndex

        // 晚子时（夜子/子夜）应算作第二天
        val hm = (if (hour < 10) "0" else "") + hour + ":" + (if (minute < 10) "0" else "") + minute
        if (hm >= "23:00" && hm <= "23:59") {
            dayGanExact++
            if (dayGanExact >= 10) {
                dayGanExact -= 10
            }
            dayZhiExact++
            if (dayZhiExact >= 12) {
                dayZhiExact -= 12
            }
        }
        dayGanIndexExact = dayGanExact
        dayZhiIndexExact = dayZhiExact
    }

    /**
     * 干支纪时计算
     */
    private fun computeTime() {
        val hm = (if (hour < 10) "0" else "") + hour + ":" + (if (minute < 10) "0" else "") + minute
        timeZhiIndex = LunarUtil.getTimeZhiIndex(hm)
        timeGanIndex = (dayGanIndexExact % 5 * 2 + timeZhiIndex) % 10
    }

    /**
     * 星期计算
     */
    private fun computeWeek() {
        weekIndex = (dayOffset + LunarUtil.BASE_WEEK_INDEX) % 7
    }

    private fun compute() {
        computeJieQi()
        computeYear()
        computeMonth()
        computeDay()
        computeTime()
        computeWeek()
    }

    /**
     * 获取年份的天干（以正月初一作为新年的开始）
     *
     * @return 天干，如辛
     */
    fun getYearGan(): String {
        return LunarUtil.GAN[yearGanIndex + 1]
    }

    /**
     * 获取年份的天干（以立春当天作为新年的开始）
     *
     * @return 天干，如辛
     */
    fun getYearGanByLiChun(): String {
        return LunarUtil.GAN[yearGanIndexByLiChun + 1]
    }

    /**
     * 获取最精确的年份天干（以立春交接的时刻作为新年的开始）
     *
     * @return 天干，如辛
     */
    fun getYearGanExact(): String {
        return LunarUtil.GAN[yearGanIndexExact + 1]
    }

    /**
     * 获取年份的地支（以正月初一作为新年的开始）
     *
     * @return 地支，如亥
     */
    fun getYearZhi(): String {
        return LunarUtil.ZHI[yearZhiIndex + 1]
    }

    /**
     * 获取年份的地支（以立春当天作为新年的开始）
     *
     * @return 地支，如亥
     */
    fun getYearZhiByLiChun(): String {
        return LunarUtil.ZHI[yearZhiIndexByLiChun + 1]
    }

    /**
     * 获取最精确的年份地支（以立春交接的时刻作为新年的开始）
     *
     * @return 地支，如亥
     */
    fun getYearZhiExact(): String {
        return LunarUtil.ZHI[yearZhiIndexExact + 1]
    }

    /**
     * 获取干支纪年（年柱）（以正月初一作为新年的开始）
     * @return 年份的干支（年柱），如辛亥
     */
    fun getYearInGanZhi(): String {
        return getYearGan() + getYearZhi()
    }

    /**
     * 获取干支纪年（年柱）（以立春当天作为新年的开始）
     * @return 年份的干支（年柱），如辛亥
     */
    fun getYearInGanZhiByLiChun(): String {
        return getYearGanByLiChun() + getYearZhiByLiChun()
    }

    /**
     * 获取干支纪年（年柱）（以立春交接的时刻作为新年的开始）
     * @return 年份的干支（年柱），如辛亥
     */
    fun getYearInGanZhiExact(): String {
        return getYearGanExact() + getYearZhiExact()
    }

    /**
     * 获取干支纪月（月柱）（以节交接当天起算）
     *
     * 月天干口诀：甲己丙寅首，乙庚戊寅头。丙辛从庚寅，丁壬壬寅求，戊癸甲寅居，周而复始流。
     *
     * 月地支：正月起寅
     *
     * @return 干支纪月（月柱），如己卯
     */
    fun getMonthInGanZhi(): String {
        return getMonthGan() + getMonthZhi()
    }

    /**
     * 获取精确的干支纪月（月柱）（以节交接时刻起算）
     *
     * 月天干口诀：甲己丙寅首，乙庚戊寅头。丙辛从庚寅，丁壬壬寅求，戊癸甲寅居，周而复始流。
     *
     * 月地支：正月起寅
     *
     * @return 干支纪月（月柱），如己卯
     */
    fun getMonthInGanZhiExact(): String {
        return getMonthGanExact() + getMonthZhiExact()
    }

    /**
     * 获取月天干（以节交接当天起算）
     * @return 月天干，如己
     */
    fun getMonthGan(): String {
        return LunarUtil.GAN[monthGanIndex + 1]
    }

    /**
     * 获取精确的月天干（以节交接时刻起算）
     * @return 月天干，如己
     */
    fun getMonthGanExact(): String {
        return LunarUtil.GAN[monthGanIndexExact + 1]
    }

    /**
     * 获取月地支（以节交接当天起算）
     * @return 月地支，如卯
     */
    fun getMonthZhi(): String {
        return LunarUtil.ZHI[monthZhiIndex + 1]
    }

    /**
     * 获取精确的月地支（以节交接时刻起算）
     * @return 月地支，如卯
     */
    fun getMonthZhiExact(): String {
        return LunarUtil.ZHI[monthZhiIndexExact + 1]
    }

    /**
     * 获取干支纪日（日柱）
     *
     * @return 干支纪日（日柱），如己卯
     */
    fun getDayInGanZhi(): String {
        return getDayGan() + getDayZhi()
    }

    /**
     * 获取干支纪日（日柱，晚子时算第二天）
     *
     * @return 干支纪日（日柱），如己卯
     */
    fun getDayInGanZhiExact(): String {
        return getDayGanExact() + getDayZhiExact()
    }

    /**
     * 获取日天干
     *
     * @return 日天干，如甲
     */
    fun getDayGan(): String {
        return LunarUtil.GAN[dayGanIndex + 1]
    }

    /**
     * 获取日天干（晚子时算第二天）
     *
     * @return 日天干，如甲
     */
    fun getDayGanExact(): String {
        return LunarUtil.GAN[dayGanIndexExact + 1]
    }

    /**
     * 获取日地支
     *
     * @return 日地支，如卯
     */
    fun getDayZhi(): String {
        return LunarUtil.ZHI[dayZhiIndex + 1]
    }

    /**
     * 获取日地支（晚子时算第二天）
     *
     * @return 日地支，如卯
     */
    fun getDayZhiExact(): String {
        return LunarUtil.ZHI[dayZhiIndexExact + 1]
    }

    /**
     * 获取年生肖（以正月初一起算）
     *
     * @return 年生肖，如虎
     */
    fun getYearShengXiao(): String {
        return LunarUtil.SHENGXIAO[yearZhiIndex + 1]
    }

    /**
     * 获取年生肖（以立春当天起算）
     *
     * @return 年生肖，如虎
     */
    fun getYearShengXiaoByLiChun(): String {
        return LunarUtil.SHENGXIAO[yearZhiIndexByLiChun + 1]
    }

    /**
     * 获取精确的年生肖（以立春交接时刻起算）
     *
     * @return 年生肖，如虎
     */
    fun getYearShengXiaoExact(): String {
        return LunarUtil.SHENGXIAO[yearZhiIndexExact + 1]
    }

    /**
     * 获取月生肖
     *
     * @return 月生肖，如虎
     */
    fun getMonthShengXiao(): String {
        return LunarUtil.SHENGXIAO[monthZhiIndex + 1]
    }

    /**
     * 获取日生肖
     *
     * @return 日生肖，如虎
     */
    fun getDayShengXiao(): String {
        return LunarUtil.SHENGXIAO[dayZhiIndex + 1]
    }

    /**
     * 获取时辰生肖
     *
     * @return 时辰生肖，如虎
     */
    fun getTimeShengXiao(): String {
        return LunarUtil.SHENGXIAO[timeZhiIndex + 1]
    }

    /**
     * 获取中文的年
     *
     * @return 中文年，如二零零一
     */
    fun getYearInChinese(): String {
        val y = year.toString() + ""
        val s = StringBuilder()
        var i = 0
        val j = y.length
        while (i < j) {
            s.append(LunarUtil.NUMBER[y[i] - '0'])
            i++
        }
        return s.toString()
    }

    /**
     * 获取中文的月
     *
     * @return 中文月，如正
     */
    fun getMonthInChinese(): String {
        return (if (month < 0) "闰" else "") + LunarUtil.MONTH[abs(month)]
    }

    /**
     * 获取中文日
     *
     * @return 中文日，如初一
     */
    fun getDayInChinese(): String {
        return LunarUtil.DAY[day]
    }

    /**
     * 获取时辰（地支）
     * @return 时辰（地支）
     */
    fun getTimeZhi(): String {
        return LunarUtil.ZHI[timeZhiIndex + 1]
    }

    /**
     * 获取时辰（天干）
     * @return 时辰（天干）
     */
    fun getTimeGan(): String {
        return LunarUtil.GAN[timeGanIndex + 1]
    }

    /**
     * 获取时辰干支（时柱），支持早子时和晚子时
     * @return 时辰干支（时柱）
     */
    fun getTimeInGanZhi(): String {
        return getTimeGan() + getTimeZhi()
    }

    /**
     * @return 获取农历季节
     */
    fun getSeason(): String {
        return LunarUtil.SEASON[abs(month)]
    }

    /**
     * @return 获取节令
     */
    fun getJie(): String {
        for (jie in LunarUtil.JIE) {
            jieQi[jie]?.apply {
                if (getYear() == solar.getYear() && getMonth() == solar.getMonth() && getDay() == solar.getDay()) {
                    return jie
                }
            }
        }
        // 追加的节令：大雪
        jieQi[JIE_QI_PREPEND]?.apply {
            if (getYear() == solar.getYear() && getMonth() == solar.getMonth() && getDay() == solar.getDay()) {
                return JIE_QI_LAST
            }
        }
        return ""
    }

    /**
     * @return 获取气令
     */
    fun getQi(): String {
        for (qi in LunarUtil.QI) {
            jieQi[qi]?.apply {
                if (getYear() == solar.getYear() && getMonth() == solar.getMonth() && getDay() == solar.getDay()) {
                    return qi
                }
            }
        }
        // 追加的气令：冬至
        jieQi[JIE_QI_APPEND]?.apply {
            if (getYear() == solar.getYear() && getMonth() == solar.getMonth() && getDay() == solar.getDay()) {
                return JIE_QI_FIRST
            }
        }
        return ""
    }

    /**
     * 获取星期，0代表周日，1代表周一
     *
     * @return 0123456
     */
    fun getWeek(): Int {
        return weekIndex
    }

    /**
     * 获取星期的中文
     *
     * @return 日一二三四五六
     */
    fun getWeekInChinese(): String {
        return SolarUtil.WEEK[getWeek()]
    }

    /**
     * 获取宿
     *
     * @return 宿
     */
    fun getXiu(): String {
        return LunarUtil.XIU[getDayZhi() + getWeek()] ?: ""
    }

    /**
     * 获取宿吉凶
     *
     * @return 吉/凶
     */
    fun getXiuLuck(): String {
        return LunarUtil.XIU_LUCK[getXiu()] ?: ""
    }

    /**
     * 获取宿歌诀
     *
     * @return 宿歌诀
     */
    fun getXiuSong(): String {
        return LunarUtil.XIU_SONG[getXiu()] ?: ""
    }

    /**
     * 获取政
     *
     * @return 政
     */
    fun getZheng(): String {
        return LunarUtil.ZHENG[getXiu()] ?: ""
    }

    /**
     * 获取动物
     * @return 动物
     */
    fun getAnimal(): String {
        return LunarUtil.ANIMAL[getXiu()] ?: ""
    }

    /**
     * 获取宫
     * @return 宫
     */
    fun getGong(): String {
        return LunarUtil.GONG[getXiu()] ?: ""
    }

    /**
     * 获取兽
     * @return 兽
     */
    fun getShou(): String {
        return LunarUtil.SHOU[getGong()] ?: ""
    }

    /**
     * 获取节日，有可能一天会有多个节日
     *
     * @return 节日列表，如春节
     */
    fun getFestivals(): List<String> {
        val l: MutableList<String> = ArrayList()
        val f = LunarUtil.FESTIVAL["$month-$day"]
        if (null != f) {
            l.add(f)
        }
        return l
    }

    /**
     * 获取非正式的节日，有可能一天会有多个节日
     *
     * @return 非正式的节日列表，如中元节
     */
    fun getOtherFestivals(): List<String> {
        val l: MutableList<String> = ArrayList()
        val fs = LunarUtil.OTHER_FESTIVAL["$month-$day"]
        if (null != fs) {
            l.addAll(fs)
        }
        return l
    }

    /**
     * 转换为阳历日期
     *
     * @return 阳历日期
     */
    private fun toSolar(): Solar {
        val c = Calendar.getInstance()
        c.set(
            SolarUtil.BASE_YEAR,
            SolarUtil.BASE_MONTH - 1,
            SolarUtil.BASE_DAY,
            hour,
            minute,
            second
        )
        c.add(Calendar.DATE, dayOffset)
        return Solar(c)
    }

    /**
     * 获取彭祖百忌天干
     * @return 彭祖百忌天干
     */
    fun getPengZuGan(): String {
        return LunarUtil.PENGZU_GAN[dayGanIndex + 1]
    }

    /**
     * 获取彭祖百忌地支
     * @return 彭祖百忌地支
     */
    fun getPengZuZhi(): String {
        return LunarUtil.PENGZU_ZHI[dayZhiIndex + 1]
    }

    /**
     * 获取日喜神方位
     * @return 喜神方位，如艮
     */
    fun getDayPositionXi(): String {
        return LunarUtil.POSITION_XI[dayGanIndex + 1]
    }

    /**
     * 获取日喜神方位描述
     * @return 喜神方位描述，如东北
     */
    fun getDayPositionXiDesc(): String {
        return LunarUtil.POSITION_DESC[getDayPositionXi()] ?: ""
    }

    /**
     * 获取日阳贵神方位
     * @return 阳贵神方位，如艮
     */
    fun getDayPositionYangGui(): String {
        return LunarUtil.POSITION_YANG_GUI[dayGanIndex + 1]
    }

    /**
     * 获取日阳贵神方位描述
     * @return 阳贵神方位描述，如东北
     */
    fun getDayPositionYangGuiDesc(): String {
        return LunarUtil.POSITION_DESC[getDayPositionYangGui()] ?: ""
    }

    /**
     * 获取日阴贵神方位
     * @return 阴贵神方位，如艮
     */
    fun getDayPositionYinGui(): String {
        return LunarUtil.POSITION_YIN_GUI[dayGanIndex + 1]
    }

    /**
     * 获取日阴贵神方位描述
     * @return 阴贵神方位描述，如东北
     */
    fun getDayPositionYinGuiDesc(): String {
        return LunarUtil.POSITION_DESC[getDayPositionYinGui()] ?: ""
    }

    /**
     * 获取日福神方位
     * @return 福神方位，如艮
     */
    fun getDayPositionFu(): String {
        return LunarUtil.POSITION_FU[dayGanIndex + 1]
    }

    /**
     * 获取日福神方位描述
     * @return 福神方位描述，如东北
     */
    fun getDayPositionFuDesc(): String {
        return LunarUtil.POSITION_DESC[getDayPositionFu()] ?: ""
    }

    /**
     * 获取日财神方位
     * @return 财神方位，如艮
     */
    fun getDayPositionCai(): String {
        return LunarUtil.POSITION_CAI[dayGanIndex + 1]
    }

    /**
     * 获取日财神方位描述
     * @return 财神方位描述，如东北
     */
    fun getDayPositionCaiDesc(): String {
        return LunarUtil.POSITION_DESC[getDayPositionCai()] ?: ""
    }

    /**
     * 获取时辰喜神方位
     * @return 喜神方位，如艮
     */
    fun getTimePositionXi(): String {
        return LunarUtil.POSITION_XI[timeGanIndex + 1]
    }

    /**
     * 获取时辰喜神方位描述
     * @return 喜神方位描述，如东北
     */
    fun getTimePositionXiDesc(): String {
        return LunarUtil.POSITION_DESC[getTimePositionXi()] ?: ""
    }

    /**
     * 获取时辰阳贵神方位
     * @return 阳贵神方位，如艮
     */
    fun getTimePositionYangGui(): String {
        return LunarUtil.POSITION_YANG_GUI[timeGanIndex + 1]
    }

    /**
     * 获取时辰阳贵神方位描述
     * @return 阳贵神方位描述，如东北
     */
    fun getTimePositionYangGuiDesc(): String {
        return LunarUtil.POSITION_DESC[getTimePositionYangGui()] ?: ""
    }

    /**
     * 获取时辰阴贵神方位
     * @return 阴贵神方位，如艮
     */
    fun getTimePositionYinGui(): String {
        return LunarUtil.POSITION_YIN_GUI[timeGanIndex + 1]
    }

    /**
     * 获取时辰阴贵神方位描述
     * @return 阴贵神方位描述，如东北
     */
    fun getTimePositionYinGuiDesc(): String {
        return LunarUtil.POSITION_DESC[getTimePositionYinGui()] ?: ""
    }

    /**
     * 获取时辰福神方位
     * @return 福神方位，如艮
     */
    fun getTimePositionFu(): String {
        return LunarUtil.POSITION_FU[timeGanIndex + 1]
    }

    /**
     * 获取时辰福神方位描述
     * @return 福神方位描述，如东北
     */
    fun getTimePositionFuDesc(): String {
        return LunarUtil.POSITION_DESC[getTimePositionFu()] ?: ""
    }

    /**
     * 获取时辰财神方位
     * @return 财神方位，如艮
     */
    fun getTimePositionCai(): String {
        return LunarUtil.POSITION_CAI[timeGanIndex + 1]
    }

    /**
     * 获取时辰财神方位描述
     * @return 财神方位描述，如东北
     */
    fun getTimePositionCaiDesc(): String {
        return LunarUtil.POSITION_DESC[getTimePositionCai()] ?: ""
    }

    /**
     * 获取年纳音
     * @return 年纳音，如剑锋金
     */
    fun getYearNaYin(): String {
        return LunarUtil.NAYIN[getYearInGanZhi()] ?: ""
    }

    /**
     * 获取月纳音
     * @return 月纳音，如剑锋金
     */
    fun getMonthNaYin(): String {
        return LunarUtil.NAYIN[getMonthInGanZhi()] ?: ""
    }

    /**
     * 获取日纳音
     * @return 日纳音，如剑锋金
     */
    fun getDayNaYin(): String {
        return LunarUtil.NAYIN[getDayInGanZhi()] ?: ""
    }

    /**
     * 获取时辰纳音
     * @return 时辰纳音，如剑锋金
     */
    fun getTimeNaYin(): String {
        return LunarUtil.NAYIN[getTimeInGanZhi()] ?: ""
    }

    /**
     * 获取八字，男性也称乾造，女性也称坤造（以立春交接时刻作为新年的开始）
     * @return 八字（男性也称乾造，女性也称坤造）
     */
    fun getBaZi(): List<String> {
        val l: MutableList<String> = ArrayList(4)
        l.add(eightChar.getYear())
        l.add(eightChar.getMonth())
        l.add(eightChar.getDay())
        l.add(eightChar.getTime())
        return l
    }

    /**
     * 获取八字五行
     * @return 八字五行
     */
    fun getBaZiWuXing(): List<String> {
        val l: MutableList<String> = ArrayList(4)
        l.add(eightChar.getYearWuXing())
        l.add(eightChar.getMonthWuXing())
        l.add(eightChar.getDayWuXing())
        l.add(eightChar.getTimeWuXing())
        return l
    }

    /**
     * 获取八字纳音
     * @return 八字纳音
     */
    fun getBaZiNaYin(): List<String> {
        val l: MutableList<String> = ArrayList(4)
        l.add(eightChar.getYearNaYin())
        l.add(eightChar.getMonthNaYin())
        l.add(eightChar.getDayNaYin())
        l.add(eightChar.getTimeNaYin())
        return l
    }

    /**
     * 获取八字天干十神，日柱十神为日主，其余三柱根据天干十神表查询
     * @return 八字天干十神
     */
    fun getBaZiShiShenGan(): List<String> {
        val l: MutableList<String> = ArrayList(4)
        l.add(eightChar.getYearShiShenGan())
        l.add(eightChar.getMonthShiShenGan())
        l.add(eightChar.getDayShiShenGan())
        l.add(eightChar.getTimeShiShenGan())
        return l
    }

    /**
     * 获取八字地支十神，根据地支十神表查询
     * @return 八字地支十神
     */
    fun getBaZiShiShenZhi(): List<String> {
        val l: MutableList<String> = ArrayList(4)
        l.add(eightChar.getYearShiShenZhi()[0])
        l.add(eightChar.getMonthShiShenZhi()[0])
        l.add(eightChar.getDayShiShenZhi()[0])
        l.add(eightChar.getTimeShiShenZhi()[0])
        return l
    }

    private fun getBaZiShiShenZhi(zhi: String): List<String> {
        val baZi = getBaZi()
        val dayGan = baZi[2].substring(0, 1)
        val hideGan = LunarUtil.ZHI_HIDE_GAN[zhi] ?: return emptyList()
        val l: MutableList<String> = ArrayList(hideGan.size)
        for (gan in hideGan) {
            l.add(LunarUtil.SHI_SHEN_ZHI[dayGan + zhi + gan] ?: "")
        }
        return l
    }

    /**
     * 获取八字年支十神
     * @return 八字年支十神
     */
    fun getBaZiShiShenYearZhi(): List<String> {
        return eightChar.getYearShiShenZhi()
    }

    /**
     * 获取八字月支十神
     * @return 八字月支十神
     */
    fun getBaZiShiShenMonthZhi(): List<String> {
        return eightChar.getMonthShiShenZhi()
    }

    /**
     * 获取八字日支十神
     * @return 八字日支十神
     */
    fun getBaZiShiShenDayZhi(): List<String> {
        return eightChar.getDayShiShenZhi()
    }

    /**
     * 获取八字时支十神
     * @return 八字时支十神
     */
    fun getBaZiShiShenTimeZhi(): List<String> {
        return eightChar.getTimeShiShenZhi()
    }

    /**
     * 获取十二执星：建、除、满、平、定、执、破、危、成、收、开、闭。当月支与日支相同即为建，依次类推
     * @return 执星
     */
    fun getZhiXing(): String {
        var offset = dayZhiIndex - monthZhiIndex
        if (offset < 0) {
            offset += 12
        }
        return LunarUtil.ZHI_XING[offset + 1]
    }

    /**
     * 获取值日天神
     * @return 值日天神
     */
    fun getDayTianShen(): String {
        val monthZhi = getMonthZhi()
        val offset = LunarUtil.ZHI_TIAN_SHEN_OFFSET[monthZhi] ?: 0
        return LunarUtil.TIAN_SHEN[(dayZhiIndex + offset) % 12 + 1]
    }

    /**
     * 获取值时天神
     * @return 值时天神
     */
    fun getTimeTianShen(): String {
        val dayZhi = getDayZhiExact()
        val offset = LunarUtil.ZHI_TIAN_SHEN_OFFSET[dayZhi] ?: 0
        return LunarUtil.TIAN_SHEN[(timeZhiIndex + offset) % 12 + 1]
    }

    /**
     * 获取值日天神类型：黄道/黑道
     * @return 值日天神类型：黄道/黑道
     */
    fun getDayTianShenType(): String {
        return LunarUtil.TIAN_SHEN_TYPE[getDayTianShen()] ?: ""
    }

    /**
     * 获取值时天神类型：黄道/黑道
     * @return 值时天神类型：黄道/黑道
     */
    fun getTimeTianShenType(): String {
        return LunarUtil.TIAN_SHEN_TYPE[getTimeTianShen()] ?: ""
    }

    /**
     * 获取值日天神吉凶
     * @return 吉/凶
     */
    fun getDayTianShenLuck(): String {
        return LunarUtil.TIAN_SHEN_TYPE_LUCK[getDayTianShenType()] ?: ""
    }

    /**
     * 获取值时天神吉凶
     * @return 吉/凶
     */
    fun getTimeTianShenLuck(): String {
        return LunarUtil.TIAN_SHEN_TYPE_LUCK[getTimeTianShenType()] ?: ""
    }

    /**
     * 获取逐日胎神方位
     * @return 逐日胎神方位
     */
    fun getDayPositionTai(): String {
        var offset = dayGanIndex - dayZhiIndex
        if (offset < 0) {
            offset += 12
        }
        return LunarUtil.POSITION_TAI_DAY[offset * 5 + dayGanIndex]
    }

    /**
     * 获取逐月胎神方位，闰月无
     * @return 逐月胎神方位
     */
    fun getMonthPositionTai(): String {
        return if (month < 0) {
            ""
        } else LunarUtil.POSITION_TAI_MONTH[month - 1]
    }

    /**
     * 获取每日宜，如果没有，返回["无"]
     * @return 宜
     */
    fun getDayYi(): List<String> {
        return LunarUtil.getDayYi(getMonthInGanZhiExact(), getDayInGanZhi())
    }

    /**
     * 获取每日忌，如果没有，返回["无"]
     * @return 忌
     */
    fun getDayJi(): List<String> {
        return LunarUtil.getDayJi(getMonthInGanZhiExact(), getDayInGanZhi())
    }

    /**
     * 获取日吉神（宜趋），如果没有，返回["无"]
     * @return 日吉神
     */
    fun getDayJiShen(): List<String> {
        return LunarUtil.getDayJiShen(getMonth(), getDayInGanZhi())
    }

    /**
     * 获取日凶煞（宜忌），如果没有，返回["无"]
     * @return 日凶煞
     */
    fun getDayXiongSha(): List<String> {
        return LunarUtil.getDayXiongSha(getMonth(), getDayInGanZhi())
    }

    /**
     * 获取日冲
     * @return 日冲，如申
     */
    fun getDayChong(): String {
        return LunarUtil.CHONG[dayZhiIndex + 1]
    }

    /**
     * 获取日煞
     * @return 日煞，如北
     */
    fun getDaySha(): String {
        return LunarUtil.SHA[getDayZhi()] ?: ""
    }

    /**
     * 获取日冲描述
     * @return 日冲描述，如(壬申)猴
     */
    fun getDayChongDesc(): String {
        return "(" + getDayChongGan() + getDayChong() + ")" + getDayChongShengXiao()
    }

    /**
     * 获取日冲生肖
     * @return 日冲生肖，如猴
     */
    fun getDayChongShengXiao(): String {
        val chong = getDayChong()
        var i = 0
        val j = LunarUtil.ZHI.size
        while (i < j) {
            if (LunarUtil.ZHI[i] == chong) {
                return LunarUtil.SHENGXIAO[i]
            }
            i++
        }
        return ""
    }

    /**
     * 获取无情之克的日冲天干
     * @return 无情之克的日冲天干，如甲
     */
    fun getDayChongGan(): String {
        return LunarUtil.CHONG_GAN[dayGanIndex + 1]
    }

    /**
     * 获取有情之克的日冲天干
     * @return 有情之克的日冲天干，如甲
     */
    fun getDayChongGanTie(): String {
        return LunarUtil.CHONG_GAN_TIE[dayGanIndex + 1]
    }

    /**
     * 获取时冲
     * @return 时冲，如申
     */
    fun getTimeChong(): String {
        return LunarUtil.CHONG[timeZhiIndex + 1]
    }

    /**
     * 获取时煞
     * @return 时煞，如北
     */
    fun getTimeSha(): String {
        return LunarUtil.SHA[getTimeZhi()] ?: ""
    }

    /**
     * 获取时冲生肖
     * @return 时冲生肖，如猴
     */
    fun getTimeChongShengXiao(): String {
        val chong = getTimeChong()
        var i = 0
        val j = LunarUtil.ZHI.size
        while (i < j) {
            if (LunarUtil.ZHI[i] == chong) {
                return LunarUtil.SHENGXIAO[i]
            }
            i++
        }
        return ""
    }

    /**
     * 获取时冲描述
     * @return 时冲描述，如(壬申)猴
     */
    fun getTimeChongDesc(): String {
        return "(" + getTimeChongGan() + getTimeChong() + ")" + getTimeChongShengXiao()
    }

    /**
     * 获取无情之克的时冲天干
     * @return 无情之克的时冲天干，如甲
     */
    fun getTimeChongGan(): String {
        return LunarUtil.CHONG_GAN[timeGanIndex + 1]
    }

    /**
     * 获取有情之克的时冲天干
     * @return 有情之克的时冲天干，如甲
     */
    fun getTimeChongGanTie(): String {
        return LunarUtil.CHONG_GAN_TIE[timeGanIndex + 1]
    }

    /**
     * 获取时辰宜，如果没有，返回["无"]
     * @return 宜
     */
    fun getTimeYi(): List<String> {
        return LunarUtil.getTimeYi(getDayInGanZhiExact(), getTimeInGanZhi())
    }

    /**
     * 获取时辰忌，如果没有，返回["无"]
     * @return 忌
     */
    fun getTimeJi(): List<String> {
        return LunarUtil.getTimeJi(getDayInGanZhiExact(), getTimeInGanZhi())
    }

    /**
     * 获取月相
     * @return 月相
     */
    fun getYueXiang(): String {
        return LunarUtil.YUE_XIANG[day]
    }

    /**
     * 获取值年九星（流年紫白星起例歌诀：年上吉星论甲子，逐年星逆中宫起；上中下作三元汇，一上四中七下兑。）
     * @return 值年九星
     */
    fun getYearNineStar(): NineStar {
        var index = LunarUtil.BASE_YEAR_JIU_XING_INDEX - (year - LunarUtil.BASE_YEAR) % 9
        if (index < 0) {
            index += 9
        }
        return NineStar(index)
    }

    /**
     * 获取值月九星（月紫白星歌诀：子午卯酉八白起，寅申巳亥二黑求，辰戌丑未五黄中。）
     * @return 值月九星
     */
    fun getMonthNineStar(): NineStar {
        var start = 2
        val yearZhi = getYearZhi()
        if ("子午卯酉".contains(yearZhi)) {
            start = 8
        } else if ("辰戌丑未".contains(yearZhi)) {
            start = 5
        }
        // 寅月起，所以需要-2
        val monthIndex = monthZhiIndex - 2
        var index = start - monthIndex - 1
        if (index < 0) {
            index += 9
        }
        return NineStar(index)
    }

    /**
     * 获取值日九星（日家紫白星歌诀：日家白法不难求，二十四气六宫周；冬至雨水及谷雨，阳顺一七四中游；夏至处暑霜降后，九三六星逆行求。）
     * @return 值日九星
     */
    fun getDayNineStar(): NineStar {
        //顺逆
        val solarYmd = solar.toYmd()
        val yuShui = jieQi["雨水"]?.toYmd() ?: ""
        val guYu = jieQi["谷雨"]?.toYmd() ?: ""
        val xiaZhi = jieQi["夏至"]?.toYmd() ?: ""
        val chuShu = jieQi["处暑"]?.toYmd() ?: ""
        val shuangJiang = jieQi["霜降"]?.toYmd() ?: ""
        val dongZhi = jieQi["冬至"]?.toYmd() ?: ""
        var start = 6
        var asc = false
        if (solarYmd >= dongZhi && solarYmd < yuShui) {
            asc = true
            start = 1
        } else if (solarYmd >= yuShui && solarYmd < guYu) {
            asc = true
            start = 7
        } else if (solarYmd >= guYu && solarYmd < xiaZhi) {
            asc = true
            start = 4
        } else if (solarYmd >= xiaZhi && solarYmd < chuShu) {
            start = 9
        } else if (solarYmd >= chuShu && solarYmd < shuangJiang) {
            start = 3
        }
        val ganZhiIndex = LunarUtil.getJiaZiIndex(getDayInGanZhi()) % 9
        var index = if (asc) start + ganZhiIndex - 1 else start - ganZhiIndex - 1
        if (index > 8) {
            index -= 9
        }
        if (index < 0) {
            index += 9
        }
        return NineStar(index)
    }

    /**
     * 获取值时九星（时家紫白星歌诀：三元时白最为佳，冬至阳生顺莫差，孟日七宫仲一白，季日四绿发萌芽，每把时辰起甲子，本时星耀照光华，时星移入中宫去，顺飞八方逐细查。夏至阴生逆回首，孟归三碧季加六，仲在九宫时起甲，依然掌中逆轮跨。）
     * @return 值时九星
     */
    fun getTimeNineStar(): NineStar {
        //顺逆
        val solarYmd = solar.toYmd()
        val dongZhi = jieQi["冬至"]?.toYmd() ?: ""
        val xiaZhi = jieQi["夏至"]?.toYmd() ?: ""
        var asc = false
        if (solarYmd >= dongZhi && solarYmd < xiaZhi) {
            asc = true
        }
        var start = if (asc) 7 else 3
        val dayZhi = getDayZhi()
        if ("子午卯酉".contains(dayZhi)) {
            start = if (asc) 1 else 9
        } else if ("辰戌丑未".contains(dayZhi)) {
            start = if (asc) 4 else 6
        }
        var index = if (asc) start + timeZhiIndex - 1 else start - timeZhiIndex - 1
        if (index > 8) {
            index -= 9
        }
        if (index < 0) {
            index += 9
        }
        return NineStar(index)
    }

    /**
     * 获取节气表（节气名称:阳历），节气交接时刻精确到秒，以冬至开头，按先后顺序排列
     * @return 节气表
     */
    fun getJieQiTable(): Map<String, Solar> {
        return jieQi
    }

    /**
     * 获取下一节令（顺推的第一个节令）
     * @return 节气
     */
    fun getNextJie(): JieQi? {
        return getNearJieQi(true, LunarUtil.JIE)
    }

    /**
     * 获取上一节令（逆推的第一个节令）
     * @return 节气
     */
    fun getPrevJie(): JieQi? {
        return getNearJieQi(false, LunarUtil.JIE)
    }

    /**
     * 获取下一气令（顺推的第一个气令）
     * @return 节气
     */
    fun getNextQi(): JieQi? {
        return getNearJieQi(true, LunarUtil.QI)
    }

    /**
     * 获取上一气令（逆推的第一个气令）
     * @return 节气
     */
    fun getPrevQi(): JieQi? {
        return getNearJieQi(false, LunarUtil.QI)
    }

    /**
     * 获取下一节气（顺推的第一个节气）
     * @return 节气
     */
    fun getNextJieQi(): JieQi? {
        return getNearJieQi(true, null)
    }

    /**
     * 获取上一节气（逆推的第一个节气）
     * @return 节气
     */
    fun getPrevJieQi(): JieQi? {
        return getNearJieQi(false, null)
    }

    /**
     * 获取最近的节气，如果未找到匹配的，返回null
     * @param forward 是否顺推，true为顺推，false为逆推
     * @param conditions 过滤条件，如果设置过滤条件，仅返回匹配该名称的
     * @return 节气
     */
    private fun getNearJieQi(forward: Boolean, conditions: Array<String>?): JieQi? {
        var name: String? = null
        var near: Solar? = null
        val filters: Set<String> = HashSet()
        if (null != conditions) {
            Collections.addAll(filters.toHashSet(), conditions)
        }
        val filter = filters.isNotEmpty()
        val today = solar.toYmdHms()
        for (entry in jieQi.entries) {
            var jq = entry.key
            if (JIE_QI_APPEND == jq) {
                jq = JIE_QI_FIRST
            }
            if (JIE_QI_PREPEND == jq) {
                jq = JIE_QI_LAST
            }
            if (filter) {
                if (!filters.contains(jq)) {
                    continue
                }
            }
            val solar = entry.value
            val day = solar.toYmdHms()
            if (forward) {
                if (day < today) {
                    continue
                }
                if (null == near || day < near.toYmdHms()) {
                    name = jq
                    near = solar
                }
            } else {
                if (day > today) {
                    continue
                }
                if (null == near || day > near.toYmdHms()) {
                    name = jq
                    near = solar
                }
            }
        }
        return if (null == near) {
            null
        } else JieQi(name, near)
    }

    /**
     * 获取节气名称，如果无节气，返回空字符串
     * @return 节气名称
     */
    fun getJieQi(): String {
        var name = ""
        for ((key, d) in jieQi) {
            if (d.getYear() == solar.getYear() && d.getMonth() == solar.getMonth() && d.getDay() == solar.getDay()) {
                name = key
                break
            }
        }
        if (JIE_QI_APPEND == name) {
            name = JIE_QI_FIRST
        } else if (JIE_QI_PREPEND == name) {
            name = JIE_QI_LAST
        }
        return name
    }

    /**
     * 获取当天节气对象，如果无节气，返回null
     * @return 节气对象
     */
    fun getCurrentJieQi(): JieQi? {
        val name = getJieQi()
        return if (name.isNotEmpty()) JieQi(name, solar) else null
    }

    /**
     * 获取当天节令对象，如果无节令，返回null
     * @return 节气对象
     */
    fun getCurrentJie(): JieQi? {
        val name = getJie()
        return if (name.isNotEmpty()) JieQi(name, solar) else null
    }

    /**
     * 获取当天气令对象，如果无气令，返回null
     * @return 节气对象
     */
    fun getCurrentQi(): JieQi? {
        val name = getQi()
        return if (name.isNotEmpty()) JieQi(name, solar) else null
    }

    /**
     * 获取年份
     *
     * @return 如2015
     */
    fun getYear(): Int {
        return year
    }

    /**
     * 获取月份
     *
     * @return 1到12，负数为闰月
     */
    fun getMonth(): Int {
        return month
    }

    /**
     * 获取日期
     *
     * @return 日期
     */
    fun getDay(): Int {
        return day
    }

    /**
     * 获取小时
     *
     * @return 0到23之间的数字
     */
    fun getHour(): Int {
        return hour
    }

    /**
     * 获取分钟
     *
     * @return 0到59之间的数字
     */
    fun getMinute(): Int {
        return minute
    }

    /**
     * 获取秒钟
     *
     * @return 0到59之间的数字
     */
    fun getSecond(): Int {
        return second
    }

    /**
     * 获取阳历
     */
    fun getSolar(): Solar {
        return solar
    }

    fun getTimeGanIndex(): Int {
        return timeGanIndex
    }

    fun getTimeZhiIndex(): Int {
        return timeZhiIndex
    }

    fun getDayGanIndexExact(): Int {
        return dayGanIndexExact
    }

    fun getDayZhiIndexExact(): Int {
        return dayZhiIndexExact
    }

    fun getMonthGanIndexExact(): Int {
        return monthGanIndexExact
    }

    fun getMonthZhiIndexExact(): Int {
        return monthZhiIndexExact
    }

    fun getYearGanIndexExact(): Int {
        return yearGanIndexExact
    }

    fun getYearZhiIndexExact(): Int {
        return yearZhiIndexExact
    }

    /**
     * 获取往后推几天的农历日期，如果要往前推，则天数用负数
     * @param days 天数
     * @return 农历日期
     */
    fun next(days: Int): Lunar {
        var y = year
        var m = month
        var d = day
        if (days > 0) {
            var daysInMonth = getDaysOfMonth(y, m)
            var rest = day + days
            while (daysInMonth < rest) {
                if (m > 0) {
                    if (getLeapMonth(y) != m) {
                        m++
                    } else {
                        m = -m
                    }
                } else {
                    m = 1 - m
                }
                if (13 == m) {
                    y++
                    m = 1
                }
                rest -= daysInMonth
                daysInMonth = getDaysOfMonth(y, m)
            }
            d = rest
        } else if (days < 0) {
            var daysInMonth = day
            var rest = -days
            while (daysInMonth <= rest) {
                if (m > 0) {
                    m--
                    if (0 == m) {
                        y--
                        m = if (getLeapMonth(y) != 12) 12 else -12
                    }
                } else {
                    m = -m
                }
                rest -= daysInMonth
                daysInMonth = getDaysOfMonth(y, m)
            }
            d = daysInMonth - rest
        }
        return Lunar(y, m, d, hour, minute, second)
    }

    fun toFullString(): String {
        val s = StringBuilder()
        s.append(toString())
        s.append(" ")
        s.append(getYearInGanZhi())
        s.append("(")
        s.append(getYearShengXiao())
        s.append(")年 ")
        s.append(getMonthInGanZhi())
        s.append("(")
        s.append(getMonthShengXiao())
        s.append(")月 ")
        s.append(getDayInGanZhi())
        s.append("(")
        s.append(getDayShengXiao())
        s.append(")日 ")
        s.append(getTimeZhi())
        s.append("(")
        s.append(getTimeShengXiao())
        s.append(")时 纳音[")
        s.append(getYearNaYin())
        s.append(" ")
        s.append(getMonthNaYin())
        s.append(" ")
        s.append(getDayNaYin())
        s.append(" ")
        s.append(getTimeNaYin())
        s.append("] 星期")
        s.append(getWeekInChinese())

        for (f in getFestivals()) {
            s.append(" (")
            s.append(f)
            s.append(")")
        }
        for (f in getOtherFestivals()) {
            s.append(" (")
            s.append(f)
            s.append(")")
        }
        val jq = getJieQi()
        if (jq.isNotEmpty()) {
            s.append(" [")
            s.append(jq)
            s.append("]")
        }
        s.append(" ")
        s.append(getGong())
        s.append("方")
        s.append(getShou())
        s.append(" 星宿[")
        s.append(getXiu())
        s.append(getZheng())
        s.append(getAnimal())
        s.append("](")
        s.append(getXiuLuck())
        s.append(") 彭祖百忌[")
        s.append(getPengZuGan())
        s.append(" ")
        s.append(getPengZuZhi())
        s.append("] 喜神方位[")
        s.append(getDayPositionXi())
        s.append("](")
        s.append(getDayPositionXiDesc())
        s.append(") 阳贵神方位[")
        s.append(getDayPositionYangGui())
        s.append("](")
        s.append(getDayPositionYangGuiDesc())
        s.append(") 阴贵神方位[")
        s.append(getDayPositionYinGui())
        s.append("](")
        s.append(getDayPositionYinGuiDesc())
        s.append(") 福神方位[")
        s.append(getDayPositionFu())
        s.append("](")
        s.append(getDayPositionFuDesc())
        s.append(") 财神方位[")
        s.append(getDayPositionCai())
        s.append("](")
        s.append(getDayPositionCaiDesc())
        s.append(") 冲[")
        s.append(getDayChongDesc())
        s.append("] 煞[")
        s.append(getDaySha())
        s.append("]")
        return s.toString()
    }

    override fun toString(): String {
        return getYearInChinese() + "年" + getMonthInChinese() + "月" + getDayInChinese()
    }
}